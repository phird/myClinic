{"version":3,"file":"index.js","sources":["../../src/Can.ts","../../src/factory.ts","../../src/hooks/useAbility.ts"],"sourcesContent":["import { PureComponent, ReactNode } from 'react';\nimport {\n  Unsubscribe,\n  AbilityTuple,\n  SubjectType,\n  AnyAbility,\n  Generics,\n  Abilities,\n  IfString,\n} from '@casl/ability';\n\nconst noop = () => {};\n\ntype AbilityCanProps<\n  T extends Abilities,\n  Else = IfString<T, { do: T } | { I: T }>\n> = T extends AbilityTuple\n  ? { do: T[0], on: T[1], field?: string } |\n  { I: T[0], a: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], an: Extract<T[1], SubjectType>, field?: string } |\n  { I: T[0], this: Exclude<T[1], SubjectType>, field?: string }\n  : Else;\n\ninterface ExtraProps {\n  not?: boolean\n  passThrough?: boolean\n}\n\ninterface CanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability: T\n  children: ReactNode | ((isAllowed: boolean, ability: T) => ReactNode)\n}\n\ninterface BoundCanExtraProps<T extends AnyAbility> extends ExtraProps {\n  ability?: T\n  children: ReactNode | ((isAllowed: boolean, ability: T) => ReactNode)\n}\n\nexport type CanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & CanExtraProps<T>;\nexport type BoundCanProps<T extends AnyAbility> =\n  AbilityCanProps<Generics<T>['abilities']> & BoundCanExtraProps<T>;\n\nexport class Can<\n  T extends AnyAbility,\n  IsBound extends boolean = false\n> extends PureComponent<IsBound extends true ? BoundCanProps<T> : CanProps<T>> {\n  private _isAllowed: boolean = false;\n  private _ability: T | null = null;\n  private _unsubscribeFromAbility: Unsubscribe = noop;\n\n  componentWillUnmount() {\n    this._unsubscribeFromAbility();\n  }\n\n  private _connectToAbility(ability?: T) {\n    if (ability === this._ability) {\n      return;\n    }\n\n    this._unsubscribeFromAbility();\n    this._ability = null;\n\n    if (ability) {\n      this._ability = ability;\n      this._unsubscribeFromAbility = ability.on('updated', () => this.forceUpdate());\n    }\n  }\n\n  get allowed() {\n    return this._isAllowed;\n  }\n\n  private _canRender(): boolean {\n    const props: any = this.props;\n    const subject = props.of || props.a || props.an || props.this || props.on;\n    const can = props.not ? 'cannot' : 'can';\n\n    return props.ability[can](props.I || props.do, subject, props.field);\n  }\n\n  render() {\n    this._connectToAbility(this.props.ability);\n    this._isAllowed = this._canRender();\n    return this.props.passThrough || this._isAllowed ? this._renderChildren() : null;\n  }\n\n  private _renderChildren() {\n    const { children, ability } = this.props;\n    const elements = typeof children === 'function'\n      ? children(this._isAllowed, ability as any)\n      : children;\n\n    return elements as ReactNode;\n  }\n}\n","import { createElement as h, ComponentClass, Consumer, FunctionComponent } from 'react';\nimport { AnyAbility } from '@casl/ability';\nimport { Can, BoundCanProps } from './Can';\n\ninterface BoundCanClass<T extends AnyAbility> extends ComponentClass<BoundCanProps<T>> {\n  new (props: BoundCanProps<T>, context?: any): Can<T, true>\n}\n\nexport function createCanBoundTo<T extends AnyAbility>(ability: T): BoundCanClass<T> {\n  return class extends Can<T, true> {\n    static defaultProps = { ability } as BoundCanClass<T>['defaultProps'];\n  };\n}\n\nexport function createContextualCan<T extends AnyAbility>(\n  Getter: Consumer<T>\n): FunctionComponent<BoundCanProps<T>> {\n  return (props: BoundCanProps<T>) => h(Getter, {\n    children: (ability: T) => h(Can, {\n      ability,\n      ...props,\n    } as any)\n  });\n}\n","import React from 'react';\nimport { AnyAbility } from '@casl/ability';\n\nexport function useAbility<T extends AnyAbility>(context: React.Context<T>): T {\n  if (process.env.NODE_ENV !== 'production' && typeof React.useContext !== 'function') {\n    /* istanbul ignore next */\n    throw new Error('You must use React >= 16.8 in order to use useAbility()');\n  }\n\n  const ability = React.useContext<T>(context);\n  const [rules, setRules] = React.useState<T['rules']>();\n\n  React.useEffect(() => ability.on('updated', (event) => {\n    if (event.rules !== rules) {\n      setRules(event.rules);\n    }\n  }), []);\n\n  return ability;\n}\n"],"names":["noop","Can","_isAllowed","_ability","_unsubscribeFromAbility","componentWillUnmount","_connectToAbility","ability","this","on","_this2","forceUpdate","_canRender","props","subject","of","a","an","can","not","I","do","field","render","passThrough","_renderChildren","children","elements","PureComponent","createCanBoundTo","defaultProps","createContextualCan","Getter","h","useAbility","context","process","env","NODE_ENV","React","useContext","Error","useState","rules","setRules","useEffect","event"],"mappings":"q/BAWA,IAAMA,EAAO,SAAPA,UAgCOC,2JAIHC,EAAsB,QACtBC,EAAqB,OACrBC,EAAuCJ,+BAE/CK,qBAAA,kBACOD,OAGCE,EAAR,2BAA0BC,iBACpBA,IAAYC,KAAKL,cAIhBC,SACAD,EAAW,QAEZI,EAAS,MACNJ,EAAWI,OACXH,EAA0BG,EAAQE,GAAG,WAAW,kBAAMC,EAAKC,qBAQ5DC,EAAR,iBACQC,EAAaL,KAAKK,UAClBC,EAAUD,EAAME,IAAMF,EAAMG,GAAKH,EAAMI,IAAMJ,EAAML,MAAQK,EAAMJ,OACjES,EAAML,EAAMM,IAAM,SAAW,aAE5BN,EAAMN,QAAQW,GAAKL,EAAMO,GAAKP,EAAMQ,GAAIP,EAASD,EAAMS,UAGhEC,OAAA,kBACOjB,EAAkBE,KAAKK,MAAMN,cAC7BL,EAAaM,KAAKI,WAChBJ,KAAKK,MAAMW,aAAehB,KAAKN,EAAaM,KAAKiB,IAAoB,QAGtEA,EAAR,mBACgCjB,KAAKK,MAA3Ba,IAAAA,SAAUnB,IAAAA,YACZoB,EAA+B,oBAAbD,EACpBA,EAASlB,KAAKN,EAAYK,GAC1BmB,SAEGC,2BAxBT,oBACSnB,KAAKN,gBAxBN0B,iBCtCH,SAASC,EAAuCtB,qGAChCN,KACZ6B,aAAe,CAAEvB,QAAAA,KAIrB,SAASwB,EACdC,UAEO,SAACnB,UAA4BoB,gBAAED,EAAQ,CAC5CN,SAAU,WAACnB,UAAe0B,gBAAEhC,KAC1BM,QAAAA,GACGM,QCjBF,SAASqB,WAAiCC,MAClB,eAAzBC,QAAQC,IAAIC,UAAyD,oBAArBC,aAAMC,iBAElD,IAAIC,MAAM,+DAGZlC,EAAUgC,aAAMC,WAAcL,SACVI,aAAMG,WAAzBC,OAAOC,OAEdL,aAAMM,WAAU,kBAAMtC,EAAQE,GAAG,WAAW,SAACqC,MACvCA,EAAMH,QAAUA,EAClBC,EAASE,EAAMH,YAEf,WAEGpC"}
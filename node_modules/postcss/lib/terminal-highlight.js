"use strict";

exports.__esModule = true;
exports.default = void 0;

var _chalk = _interopRequireDefault(require("chalk"));

var _tokenize = _interopRequireDefault(require("./tokenize"));

var _input = _interopRequireDefault(require("./input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const HIGHLIGHT_THEME = {
  'brackets': _chalk.default.cyan,
  'at-word': _chalk.default.cyan,
  'comment': _chalk.default.gray,
  'string': _chalk.default.green,
  'class': _chalk.default.yellow,
  'call': _chalk.default.cyan,
  'hash': _chalk.default.magenta,
  '(': _chalk.default.cyan,
  ')': _chalk.default.cyan,
  '{': _chalk.default.yellow,
  '}': _chalk.default.yellow,
  '[': _chalk.default.yellow,
  ']': _chalk.default.yellow,
  ':': _chalk.default.yellow,
  ';': _chalk.default.yellow
};

function getTokenType([type, value], processor) {
  if (type === 'word') {
    if (value[0] === '.') {
      return 'class';
    }

    if (value[0] === '#') {
      return 'hash';
    }
  }

  if (!processor.endOfFile()) {
    let next = processor.nextToken();
    processor.back(next);
    if (next[0] === 'brackets' || next[0] === '(') return 'call';
  }

  return type;
}

function terminalHighlight(css) {
  let processor = (0, _tokenize.default)(new _input.default(css), {
    ignoreErrors: true
  });
  let result = '';

  while (!processor.endOfFile()) {
    let token = processor.nextToken();
    let color = HIGHLIGHT_THEME[getTokenType(token, processor)];

    if (color) {
      result += token[1].split(/\r?\n/).map(i => color(i)).join('\n');
    } else {
      result += token[1];
    }
  }

  return result;
}

var _default = terminalHighlight;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlcm1pbmFsLWhpZ2hsaWdodC5lczYiXSwibmFtZXMiOlsiSElHSExJR0hUX1RIRU1FIiwiY2hhbGsiLCJjeWFuIiwiZ3JheSIsImdyZWVuIiwieWVsbG93IiwibWFnZW50YSIsImdldFRva2VuVHlwZSIsInR5cGUiLCJ2YWx1ZSIsInByb2Nlc3NvciIsImVuZE9mRmlsZSIsIm5leHQiLCJuZXh0VG9rZW4iLCJiYWNrIiwidGVybWluYWxIaWdobGlnaHQiLCJjc3MiLCJJbnB1dCIsImlnbm9yZUVycm9ycyIsInJlc3VsdCIsInRva2VuIiwiY29sb3IiLCJzcGxpdCIsIm1hcCIsImkiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsZUFBZSxHQUFHO0FBQ3RCLGNBQVlDLGVBQU1DLElBREk7QUFFdEIsYUFBV0QsZUFBTUMsSUFGSztBQUd0QixhQUFXRCxlQUFNRSxJQUhLO0FBSXRCLFlBQVVGLGVBQU1HLEtBSk07QUFLdEIsV0FBU0gsZUFBTUksTUFMTztBQU10QixVQUFRSixlQUFNQyxJQU5RO0FBT3RCLFVBQVFELGVBQU1LLE9BUFE7QUFRdEIsT0FBS0wsZUFBTUMsSUFSVztBQVN0QixPQUFLRCxlQUFNQyxJQVRXO0FBVXRCLE9BQUtELGVBQU1JLE1BVlc7QUFXdEIsT0FBS0osZUFBTUksTUFYVztBQVl0QixPQUFLSixlQUFNSSxNQVpXO0FBYXRCLE9BQUtKLGVBQU1JLE1BYlc7QUFjdEIsT0FBS0osZUFBTUksTUFkVztBQWV0QixPQUFLSixlQUFNSTtBQWZXLENBQXhCOztBQWtCQSxTQUFTRSxZQUFULENBQXVCLENBQUNDLElBQUQsRUFBT0MsS0FBUCxDQUF2QixFQUFzQ0MsU0FBdEMsRUFBaUQ7QUFDL0MsTUFBSUYsSUFBSSxLQUFLLE1BQWIsRUFBcUI7QUFDbkIsUUFBSUMsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhLEdBQWpCLEVBQXNCO0FBQ3BCLGFBQU8sT0FBUDtBQUNEOztBQUNELFFBQUlBLEtBQUssQ0FBQyxDQUFELENBQUwsS0FBYSxHQUFqQixFQUFzQjtBQUNwQixhQUFPLE1BQVA7QUFDRDtBQUNGOztBQUVELE1BQUksQ0FBQ0MsU0FBUyxDQUFDQyxTQUFWLEVBQUwsRUFBNEI7QUFDMUIsUUFBSUMsSUFBSSxHQUFHRixTQUFTLENBQUNHLFNBQVYsRUFBWDtBQUNBSCxJQUFBQSxTQUFTLENBQUNJLElBQVYsQ0FBZUYsSUFBZjtBQUNBLFFBQUlBLElBQUksQ0FBQyxDQUFELENBQUosS0FBWSxVQUFaLElBQTBCQSxJQUFJLENBQUMsQ0FBRCxDQUFKLEtBQVksR0FBMUMsRUFBK0MsT0FBTyxNQUFQO0FBQ2hEOztBQUVELFNBQU9KLElBQVA7QUFDRDs7QUFFRCxTQUFTTyxpQkFBVCxDQUE0QkMsR0FBNUIsRUFBaUM7QUFDL0IsTUFBSU4sU0FBUyxHQUFHLHVCQUFVLElBQUlPLGNBQUosQ0FBVUQsR0FBVixDQUFWLEVBQTBCO0FBQUVFLElBQUFBLFlBQVksRUFBRTtBQUFoQixHQUExQixDQUFoQjtBQUNBLE1BQUlDLE1BQU0sR0FBRyxFQUFiOztBQUNBLFNBQU8sQ0FBQ1QsU0FBUyxDQUFDQyxTQUFWLEVBQVIsRUFBK0I7QUFDN0IsUUFBSVMsS0FBSyxHQUFHVixTQUFTLENBQUNHLFNBQVYsRUFBWjtBQUNBLFFBQUlRLEtBQUssR0FBR3JCLGVBQWUsQ0FBQ08sWUFBWSxDQUFDYSxLQUFELEVBQVFWLFNBQVIsQ0FBYixDQUEzQjs7QUFDQSxRQUFJVyxLQUFKLEVBQVc7QUFDVEYsTUFBQUEsTUFBTSxJQUFJQyxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNFLEtBQVQsQ0FBZSxPQUFmLEVBQ1BDLEdBRE8sQ0FDSEMsQ0FBQyxJQUFJSCxLQUFLLENBQUNHLENBQUQsQ0FEUCxFQUVQQyxJQUZPLENBRUYsSUFGRSxDQUFWO0FBR0QsS0FKRCxNQUlPO0FBQ0xOLE1BQUFBLE1BQU0sSUFBSUMsS0FBSyxDQUFDLENBQUQsQ0FBZjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0QsTUFBUDtBQUNEOztlQUVjSixpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFsayBmcm9tICdjaGFsaydcblxuaW1wb3J0IHRva2VuaXplciBmcm9tICcuL3Rva2VuaXplJ1xuaW1wb3J0IElucHV0IGZyb20gJy4vaW5wdXQnXG5cbmNvbnN0IEhJR0hMSUdIVF9USEVNRSA9IHtcbiAgJ2JyYWNrZXRzJzogY2hhbGsuY3lhbixcbiAgJ2F0LXdvcmQnOiBjaGFsay5jeWFuLFxuICAnY29tbWVudCc6IGNoYWxrLmdyYXksXG4gICdzdHJpbmcnOiBjaGFsay5ncmVlbixcbiAgJ2NsYXNzJzogY2hhbGsueWVsbG93LFxuICAnY2FsbCc6IGNoYWxrLmN5YW4sXG4gICdoYXNoJzogY2hhbGsubWFnZW50YSxcbiAgJygnOiBjaGFsay5jeWFuLFxuICAnKSc6IGNoYWxrLmN5YW4sXG4gICd7JzogY2hhbGsueWVsbG93LFxuICAnfSc6IGNoYWxrLnllbGxvdyxcbiAgJ1snOiBjaGFsay55ZWxsb3csXG4gICddJzogY2hhbGsueWVsbG93LFxuICAnOic6IGNoYWxrLnllbGxvdyxcbiAgJzsnOiBjaGFsay55ZWxsb3dcbn1cblxuZnVuY3Rpb24gZ2V0VG9rZW5UeXBlIChbdHlwZSwgdmFsdWVdLCBwcm9jZXNzb3IpIHtcbiAgaWYgKHR5cGUgPT09ICd3b3JkJykge1xuICAgIGlmICh2YWx1ZVswXSA9PT0gJy4nKSB7XG4gICAgICByZXR1cm4gJ2NsYXNzJ1xuICAgIH1cbiAgICBpZiAodmFsdWVbMF0gPT09ICcjJykge1xuICAgICAgcmV0dXJuICdoYXNoJ1xuICAgIH1cbiAgfVxuXG4gIGlmICghcHJvY2Vzc29yLmVuZE9mRmlsZSgpKSB7XG4gICAgbGV0IG5leHQgPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBwcm9jZXNzb3IuYmFjayhuZXh0KVxuICAgIGlmIChuZXh0WzBdID09PSAnYnJhY2tldHMnIHx8IG5leHRbMF0gPT09ICcoJykgcmV0dXJuICdjYWxsJ1xuICB9XG5cbiAgcmV0dXJuIHR5cGVcbn1cblxuZnVuY3Rpb24gdGVybWluYWxIaWdobGlnaHQgKGNzcykge1xuICBsZXQgcHJvY2Vzc29yID0gdG9rZW5pemVyKG5ldyBJbnB1dChjc3MpLCB7IGlnbm9yZUVycm9yczogdHJ1ZSB9KVxuICBsZXQgcmVzdWx0ID0gJydcbiAgd2hpbGUgKCFwcm9jZXNzb3IuZW5kT2ZGaWxlKCkpIHtcbiAgICBsZXQgdG9rZW4gPSBwcm9jZXNzb3IubmV4dFRva2VuKClcbiAgICBsZXQgY29sb3IgPSBISUdITElHSFRfVEhFTUVbZ2V0VG9rZW5UeXBlKHRva2VuLCBwcm9jZXNzb3IpXVxuICAgIGlmIChjb2xvcikge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdLnNwbGl0KC9cXHI/XFxuLylcbiAgICAgICAgLm1hcChpID0+IGNvbG9yKGkpKVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IHRva2VuWzFdXG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRcbn1cblxuZXhwb3J0IGRlZmF1bHQgdGVybWluYWxIaWdobGlnaHRcbiJdLCJmaWxlIjoidGVybWluYWwtaGlnaGxpZ2h0LmpzIn0=

import {
  _assertThisInitialized,
  _setPrototypeOf
} from "./chunk-R6WC6Q7P.js";
import {
  _extends
} from "./chunk-CDTUZUIK.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-U7RQDBTB.js";
import {
  require_prop_types
} from "./chunk-CN53D5EC.js";
import "./chunk-ABOZOKQN.js";
import {
  Manager,
  Popper,
  Reference
} from "./chunk-VYVAVXR3.js";
import {
  require_react_dom
} from "./chunk-X3OPGED3.js";
import {
  require_react
} from "./chunk-6JD7F22O.js";
import {
  require_classnames
} from "./chunk-FBX6LSBS.js";
import {
  __toESM,
  init_buffer,
  init_virtual_process_polyfill
} from "./chunk-6JVGITVI.js";

// node_modules/reactstrap/dist/reactstrap.modern.js
init_virtual_process_polyfill();
init_buffer();
var import_react8 = __toESM(require_react());
var import_prop_types7 = __toESM(require_prop_types());
var import_classnames = __toESM(require_classnames());
var import_react_dom3 = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/index.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/react-transition-group/esm/CSSTransition.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
init_virtual_process_polyfill();
init_buffer();
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/addClass.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/dom-helpers/esm/hasClass.js
init_virtual_process_polyfill();
init_buffer();
function hasClass(element, className) {
  if (element.classList)
    return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList)
    element.classList.add(className);
  else if (!hasClass(element, className))
    if (typeof element.className === "string")
      element.className = element.className + " " + className;
    else
      element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
init_virtual_process_polyfill();
init_buffer();
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react3 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
init_virtual_process_polyfill();
init_buffer();
var import_prop_types2 = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
init_virtual_process_polyfill();
init_buffer();
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
init_virtual_process_polyfill();
init_buffer();
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
init_virtual_process_polyfill();
init_buffer();
var import_react = __toESM(require_react());
var TransitionGroupContext_default = import_react.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
init_virtual_process_polyfill();
init_buffer();
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition2, _React$Component);
  function Transition2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node)
            forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return import_react2.default.createElement(TransitionGroupContext_default.Provider, {
      value: null
    }, typeof children2 === "function" ? children2(status, childProps) : import_react2.default.cloneElement(import_react2.default.Children.only(children2), childProps));
  };
  return Transition2;
}(import_react2.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  in: import_prop_types2.default.bool,
  mountOnEnter: import_prop_types2.default.bool,
  unmountOnExit: import_prop_types2.default.bool,
  appear: import_prop_types2.default.bool,
  enter: import_prop_types2.default.bool,
  exit: import_prop_types2.default.bool,
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener)
      pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  addEndListener: import_prop_types2.default.func,
  onEnter: import_prop_types2.default.func,
  onEntering: import_prop_types2.default.func,
  onEntered: import_prop_types2.default.func,
  onExit: import_prop_types2.default.func,
  onExiting: import_prop_types2.default.func,
  onExited: import_prop_types2.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return addClass(node, c);
  });
};
var removeClass2 = function removeClass3(node, classes) {
  return node && classes && classes.split(" ").forEach(function(c) {
    return removeClass(node, c);
  });
};
var CSSTransition = function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames2 = _this.props.classNames;
      var isStringClassNames = typeof classNames2 === "string";
      var prefix = isStringClassNames && classNames2 ? classNames2 + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix + type : classNames2[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames2[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames2[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node)
        forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, _ = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react3.default.createElement(Transition_default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(import_react3.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  classNames: classNamesShape,
  onEnter: import_prop_types3.default.func,
  onEntering: import_prop_types3.default.func,
  onEntered: import_prop_types3.default.func,
  onExit: import_prop_types3.default.func,
  onExiting: import_prop_types3.default.func,
  onExited: import_prop_types3.default.func
}) : {};

// node_modules/react-transition-group/esm/ReplaceTransition.js
init_virtual_process_polyfill();
init_buffer();
var import_prop_types5 = __toESM(require_prop_types());
var import_react6 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/TransitionGroup.js
init_virtual_process_polyfill();
init_buffer();
var import_prop_types4 = __toESM(require_prop_types());
var import_react5 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
init_virtual_process_polyfill();
init_buffer();
var import_react4 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react4.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2)
    import_react4.Children.map(children2, function(c) {
      return c;
    }).forEach(function(child) {
      result[child.key] = mapper(child);
    });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react4.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key) {
    var child = children2[key];
    if (!(0, import_react4.isValidElement)(child))
      return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react4.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react4.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react4.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react4.isValidElement)(prevChild)) {
      children2[key] = (0, import_react4.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k) {
    return obj[k];
  });
};
var defaultProps = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping)
      return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component2 === null) {
      return import_react5.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react5.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react5.default.createElement(Component2, props, children2));
  };
  return TransitionGroup2;
}(import_react5.default.Component);
TransitionGroup.propTypes = true ? {
  component: import_prop_types4.default.any,
  children: import_prop_types4.default.node,
  appear: import_prop_types4.default.bool,
  enter: import_prop_types4.default.bool,
  exit: import_prop_types4.default.bool,
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react6.default.Children.toArray(children2)[idx];
    if (child.props[handler])
      (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react6.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return import_react6.default.createElement(TransitionGroup_default, props, inProp ? import_react6.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react6.default.cloneElement(second, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
}(import_react6.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props, propName) {
    if (import_react6.default.Children.count(props[propName]) !== 2)
      return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
init_virtual_process_polyfill();
init_buffer();
var import_react7 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren)
    return false;
  if (import_react7.default.isValidElement(oldChildren) && import_react7.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name, cb) {
  return function() {
    var _element$props;
    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react7.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react7.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react7.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react7.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react7.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react7.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react7.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react7.default.cloneElement(props.children, {
        in: true
      })
    };
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data);
        break;
      case EXITING:
        component = leaveRenders[mode](data);
        break;
      case ENTERED:
        component = current;
    }
    return import_react7.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
}(import_react7.default.Component);
SwitchTransition.propTypes = true ? {
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/reactstrap/dist/reactstrap.modern.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) {
      symbols = symbols.filter(function(sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose2(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function getScrollbarWidth() {
  let scrollDiv = document.createElement("div");
  scrollDiv.style.position = "absolute";
  scrollDiv.style.top = "-9999px";
  scrollDiv.style.width = "50px";
  scrollDiv.style.height = "50px";
  scrollDiv.style.overflow = "scroll";
  document.body.appendChild(scrollDiv);
  const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
  document.body.removeChild(scrollDiv);
  return scrollbarWidth;
}
function setScrollbarWidth(padding) {
  document.body.style.paddingRight = padding > 0 ? `${padding}px` : null;
}
function isBodyOverflowing() {
  return document.body.clientWidth < window.innerWidth;
}
function getOriginalBodyPadding() {
  const style = window.getComputedStyle(document.body, null);
  return parseInt(style && style.getPropertyValue("padding-right") || 0, 10);
}
function conditionallyUpdateScrollbar() {
  const scrollbarWidth = getScrollbarWidth();
  const fixedContent = document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")[0];
  const bodyPadding = fixedContent ? parseInt(fixedContent.style.paddingRight || 0, 10) : 0;
  if (isBodyOverflowing()) {
    setScrollbarWidth(bodyPadding + scrollbarWidth);
  }
}
var globalCssModule;
function setGlobalCssModule(cssModule) {
  globalCssModule = cssModule;
}
function mapToCssModules(className = "", cssModule = globalCssModule) {
  if (!cssModule)
    return className;
  return className.split(" ").map((c) => cssModule[c] || c).join(" ");
}
function omit(obj, omitKeys2) {
  const result = {};
  Object.keys(obj).forEach((key) => {
    if (omitKeys2.indexOf(key) === -1) {
      result[key] = obj[key];
    }
  });
  return result;
}
function pick(obj, keys) {
  const pickKeys = Array.isArray(keys) ? keys : [keys];
  let {
    length
  } = pickKeys;
  let key;
  const result = {};
  while (length > 0) {
    length -= 1;
    key = pickKeys[length];
    result[key] = obj[key];
  }
  return result;
}
var warned = {};
function warnOnce(message) {
  if (!warned[message]) {
    if (typeof console !== "undefined") {
      console.error(message);
    }
    warned[message] = true;
  }
}
function deprecated(propType, explanation) {
  return function validate(props, propName, componentName, ...rest) {
    if (props[propName] !== null && typeof props[propName] !== "undefined") {
      warnOnce(`"${propName}" property of "${componentName}" has been deprecated.
${explanation}`);
    }
    return propType(props, propName, componentName, ...rest);
  };
}
var Element2 = typeof window === "object" && window.Element || function() {
};
function DOMElement(props, propName, componentName) {
  if (!(props[propName] instanceof Element2)) {
    return new Error("Invalid prop `" + propName + "` supplied to `" + componentName + "`. Expected prop to be an instance of Element. Validation failed.");
  }
}
var targetPropType = import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.func, DOMElement, import_prop_types7.default.shape({
  current: import_prop_types7.default.any
})]);
var tagPropType = import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.string, import_prop_types7.default.shape({
  $$typeof: import_prop_types7.default.symbol,
  render: import_prop_types7.default.func
}), import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.string, import_prop_types7.default.shape({
  $$typeof: import_prop_types7.default.symbol,
  render: import_prop_types7.default.func
})]))]);
var TransitionTimeouts = {
  Fade: 150,
  Collapse: 350,
  Modal: 300,
  Carousel: 600,
  Offcanvas: 300
};
var TransitionPropTypeKeys = ["in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"];
var TransitionStatuses = {
  ENTERING: "entering",
  ENTERED: "entered",
  EXITING: "exiting",
  EXITED: "exited"
};
var keyCodes = {
  esc: 27,
  space: 32,
  enter: 13,
  tab: 9,
  up: 38,
  down: 40,
  home: 36,
  end: 35,
  n: 78,
  p: 80
};
var PopperPlacements = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"];
var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
function isReactRefObj(target) {
  if (target && typeof target === "object") {
    return "current" in target;
  }
  return false;
}
function getTag(value) {
  if (value == null) {
    return value === void 0 ? "[object Undefined]" : "[object Null]";
  }
  return Object.prototype.toString.call(value);
}
function isObject(value) {
  const type = typeof value;
  return value != null && (type === "object" || type === "function");
}
function toNumber(value) {
  const type = typeof value;
  const NAN = 0 / 0;
  if (type === "number") {
    return value;
  }
  if (type === "symbol" || type === "object" && getTag(value) === "[object Symbol]") {
    return NAN;
  }
  if (isObject(value)) {
    const other = typeof value.valueOf === "function" ? value.valueOf() : value;
    value = isObject(other) ? `${other}` : other;
  }
  if (type !== "string") {
    return value === 0 ? value : +value;
  }
  value = value.replace(/^\s+|\s+$/g, "");
  const isBinary = /^0b[01]+$/i.test(value);
  return isBinary || /^0o[0-7]+$/i.test(value) ? parseInt(value.slice(2), isBinary ? 2 : 8) : /^[-+]0x[0-9a-f]+$/i.test(value) ? NAN : +value;
}
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  const tag = getTag(value);
  return tag === "[object Function]" || tag === "[object AsyncFunction]" || tag === "[object GeneratorFunction]" || tag === "[object Proxy]";
}
function findDOMElements(target) {
  if (isReactRefObj(target)) {
    return target.current;
  }
  if (isFunction(target)) {
    return target();
  }
  if (typeof target === "string" && canUseDOM) {
    let selection = document.querySelectorAll(target);
    if (!selection.length) {
      selection = document.querySelectorAll(`#${target}`);
    }
    if (!selection.length) {
      throw new Error(`The target '${target}' could not be identified in the dom, tip: check spelling`);
    }
    return selection;
  }
  return target;
}
function isArrayOrNodeList(els) {
  if (els === null) {
    return false;
  }
  return Array.isArray(els) || canUseDOM && typeof els.length === "number";
}
function getTarget(target, allElements) {
  const els = findDOMElements(target);
  if (allElements) {
    if (isArrayOrNodeList(els)) {
      return els;
    }
    if (els === null) {
      return [];
    }
    return [els];
  }
  if (isArrayOrNodeList(els)) {
    return els[0];
  }
  return els;
}
var defaultToggleEvents = ["touchstart", "click"];
function addMultipleEventListeners(_els, handler, _events, useCapture) {
  let els = _els;
  if (!isArrayOrNodeList(els)) {
    els = [els];
  }
  let events = _events;
  if (typeof events === "string") {
    events = events.split(/\s+/);
  }
  if (!isArrayOrNodeList(els) || typeof handler !== "function" || !Array.isArray(events)) {
    throw new Error(`
      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.
      The second must be a function.
      The third is a string or an array of strings that represents DOM events
    `);
  }
  Array.prototype.forEach.call(events, (event) => {
    Array.prototype.forEach.call(els, (el) => {
      el.addEventListener(event, handler, useCapture);
    });
  });
  return function removeEvents() {
    Array.prototype.forEach.call(events, (event) => {
      Array.prototype.forEach.call(els, (el) => {
        el.removeEventListener(event, handler, useCapture);
      });
    });
  };
}
var focusableElements = ["a[href]", "area[href]", "input:not([disabled]):not([type=hidden])", "select:not([disabled])", "textarea:not([disabled])", "button:not([disabled])", "object", "embed", "[tabindex]:not(.modal):not(.offcanvas)", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'];
var utils = {
  __proto__: null,
  getScrollbarWidth,
  setScrollbarWidth,
  isBodyOverflowing,
  getOriginalBodyPadding,
  conditionallyUpdateScrollbar,
  setGlobalCssModule,
  mapToCssModules,
  omit,
  pick,
  warnOnce,
  deprecated,
  DOMElement,
  targetPropType,
  tagPropType,
  TransitionTimeouts,
  TransitionPropTypeKeys,
  TransitionStatuses,
  keyCodes,
  PopperPlacements,
  canUseDOM,
  isReactRefObj,
  isObject,
  toNumber,
  isFunction,
  findDOMElements,
  isArrayOrNodeList,
  getTarget,
  defaultToggleEvents,
  addMultipleEventListeners,
  focusableElements
};
var _excluded$1h = ["className", "cssModule", "fluid", "tag"];
var propTypes$1m = {
  tag: tagPropType,
  fluid: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string]),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$1k = {
  tag: "div"
};
function Container(props) {
  const {
    className,
    cssModule,
    fluid,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1h);
  let containerClass = "container";
  if (fluid === true) {
    containerClass = "container-fluid";
  } else if (fluid) {
    containerClass = `container-${fluid}`;
  }
  const classes = mapToCssModules((0, import_classnames.default)(className, containerClass), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
Container.propTypes = propTypes$1m;
Container.defaultProps = defaultProps$1k;
var _excluded$1g = ["className", "cssModule", "noGutters", "tag", "widths"];
var rowColWidths = ["xs", "sm", "md", "lg", "xl", "xxl"];
var rowColsPropType = import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]);
var propTypes$1l = {
  tag: tagPropType,
  noGutters: deprecated(import_prop_types7.default.bool, "Please use Bootstrap 5 gutter utility classes. https://getbootstrap.com/docs/5.0/layout/gutters/"),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  xs: rowColsPropType,
  sm: rowColsPropType,
  md: rowColsPropType,
  lg: rowColsPropType,
  xl: rowColsPropType,
  xxl: rowColsPropType,
  widths: import_prop_types7.default.array
};
var defaultProps$1j = {
  tag: "div",
  widths: rowColWidths
};
function Row(props) {
  const {
    className,
    cssModule,
    noGutters,
    tag: Tag,
    widths
  } = props, attributes = _objectWithoutProperties(props, _excluded$1g);
  const colClasses = [];
  widths.forEach((colWidth, i) => {
    let colSize = props[colWidth];
    delete attributes[colWidth];
    if (!colSize) {
      return;
    }
    const isXs = !i;
    colClasses.push(isXs ? `row-cols-${colSize}` : `row-cols-${colWidth}-${colSize}`);
  });
  const classes = mapToCssModules((0, import_classnames.default)(className, noGutters ? "gx-0" : null, "row", colClasses), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
Row.propTypes = propTypes$1l;
Row.defaultProps = defaultProps$1j;
var _excluded$1f = ["className", "cssModule", "widths", "tag"];
var colWidths$1 = ["xs", "sm", "md", "lg", "xl", "xxl"];
var stringOrNumberProp$1 = import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]);
var columnProps$1 = import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.number, import_prop_types7.default.string, import_prop_types7.default.shape({
  size: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.number, import_prop_types7.default.string]),
  order: stringOrNumberProp$1,
  offset: stringOrNumberProp$1
})]);
var propTypes$1k = {
  tag: tagPropType,
  xs: columnProps$1,
  sm: columnProps$1,
  md: columnProps$1,
  lg: columnProps$1,
  xl: columnProps$1,
  xxl: columnProps$1,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  widths: import_prop_types7.default.array
};
var defaultProps$1i = {
  tag: "div",
  widths: colWidths$1
};
var getColumnSizeClass$1 = (isXs, colWidth, colSize) => {
  if (colSize === true || colSize === "") {
    return isXs ? "col" : `col-${colWidth}`;
  }
  if (colSize === "auto") {
    return isXs ? "col-auto" : `col-${colWidth}-auto`;
  }
  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
};
var getColumnClasses = (attributes, cssModule, widths = colWidths$1) => {
  const modifiedAttributes = attributes;
  const colClasses = [];
  widths.forEach((colWidth, i) => {
    let columnProp = modifiedAttributes[colWidth];
    delete modifiedAttributes[colWidth];
    if (!columnProp && columnProp !== "") {
      return;
    }
    const isXs = !i;
    if (isObject(columnProp)) {
      const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
      const colClass = getColumnSizeClass$1(isXs, colWidth, columnProp.size);
      colClasses.push(mapToCssModules((0, import_classnames.default)({
        [colClass]: columnProp.size || columnProp.size === "",
        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,
        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0
      }), cssModule));
    } else {
      const colClass = getColumnSizeClass$1(isXs, colWidth, columnProp);
      colClasses.push(colClass);
    }
  });
  return {
    colClasses,
    modifiedAttributes
  };
};
function Col(props) {
  const {
    className,
    cssModule,
    widths,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1f);
  let {
    modifiedAttributes,
    colClasses
  } = getColumnClasses(attributes, cssModule, widths);
  if (!colClasses.length) {
    colClasses.push("col");
  }
  const classes = mapToCssModules((0, import_classnames.default)(className, colClasses), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, modifiedAttributes, {
    className: classes
  }));
}
Col.propTypes = propTypes$1k;
Col.defaultProps = defaultProps$1i;
var _excluded$1e = ["expand", "className", "cssModule", "light", "dark", "fixed", "sticky", "color", "container", "tag", "children"];
var propTypes$1j = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  color: import_prop_types7.default.string,
  container: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string]),
  cssModule: import_prop_types7.default.object,
  dark: import_prop_types7.default.bool,
  expand: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string]),
  fixed: import_prop_types7.default.string,
  full: import_prop_types7.default.bool,
  light: import_prop_types7.default.bool,
  role: import_prop_types7.default.string,
  sticky: import_prop_types7.default.string,
  tag: tagPropType
};
var defaultProps$1h = {
  tag: "nav",
  expand: false,
  container: "fluid"
};
var getExpandClass = (expand) => {
  if (expand === false) {
    return false;
  }
  if (expand === true || expand === "xs") {
    return "navbar-expand";
  }
  return `navbar-expand-${expand}`;
};
function Navbar(props) {
  const {
    expand,
    className,
    cssModule,
    light,
    dark,
    fixed,
    sticky,
    color,
    container,
    tag: Tag,
    children: children2
  } = props, attributes = _objectWithoutProperties(props, _excluded$1e);
  const classes = mapToCssModules((0, import_classnames.default)(className, "navbar", getExpandClass(expand), {
    "navbar-light": light,
    "navbar-dark": dark,
    [`bg-${color}`]: color,
    [`fixed-${fixed}`]: fixed,
    [`sticky-${sticky}`]: sticky
  }), cssModule);
  const containerClass = container && container === true ? "container" : `container-${container}`;
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }), container ? import_react8.default.createElement("div", {
    className: containerClass
  }, children2) : children2);
}
Navbar.propTypes = propTypes$1j;
Navbar.defaultProps = defaultProps$1h;
var _excluded$1d = ["className", "cssModule", "tag"];
var propTypes$1i = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$1g = {
  tag: "a"
};
function NavbarBrand(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1d);
  const classes = mapToCssModules((0, import_classnames.default)(className, "navbar-brand"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
NavbarBrand.propTypes = propTypes$1i;
NavbarBrand.defaultProps = defaultProps$1g;
var _excluded$1c = ["className", "cssModule", "active", "tag"];
var propTypes$1h = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  active: import_prop_types7.default.bool
};
var defaultProps$1f = {
  tag: "span"
};
function NavbarText(props) {
  const {
    className,
    cssModule,
    active,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1c);
  const classes = mapToCssModules((0, import_classnames.default)(className, "navbar-text"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
NavbarText.propTypes = propTypes$1h;
NavbarText.defaultProps = defaultProps$1f;
var _excluded$1b = ["className", "cssModule", "children", "tag"];
var propTypes$1g = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  type: import_prop_types7.default.string,
  children: import_prop_types7.default.node
};
var defaultProps$1e = {
  tag: "button",
  type: "button"
};
function NavbarToggler(props) {
  const {
    className,
    cssModule,
    children: children2,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1b);
  const classes = mapToCssModules((0, import_classnames.default)(className, "navbar-toggler"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({
    "aria-label": "Toggle navigation"
  }, attributes, {
    className: classes
  }), children2 || import_react8.default.createElement("span", {
    className: mapToCssModules("navbar-toggler-icon", cssModule)
  }));
}
NavbarToggler.propTypes = propTypes$1g;
NavbarToggler.defaultProps = defaultProps$1e;
var _excluded$1a = ["className", "cssModule", "tabs", "pills", "vertical", "horizontal", "justified", "fill", "navbar", "card", "tag"];
var propTypes$1f = {
  card: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  fill: import_prop_types7.default.bool,
  horizontal: import_prop_types7.default.oneOf(["center", "end"]),
  justified: import_prop_types7.default.bool,
  navbar: import_prop_types7.default.bool,
  pills: import_prop_types7.default.bool,
  tabs: import_prop_types7.default.bool,
  tag: tagPropType,
  vertical: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string])
};
var defaultProps$1d = {
  tag: "ul",
  vertical: false
};
var getVerticalClass = (vertical) => {
  if (vertical === false) {
    return false;
  }
  if (vertical === true || vertical === "xs") {
    return "flex-column";
  }
  return `flex-${vertical}-column`;
};
function Nav(props) {
  const {
    className,
    cssModule,
    tabs,
    pills,
    vertical,
    horizontal,
    justified,
    fill,
    navbar,
    card,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$1a);
  const classes = mapToCssModules((0, import_classnames.default)(className, navbar ? "navbar-nav" : "nav", horizontal ? `justify-content-${horizontal}` : false, getVerticalClass(vertical), {
    "nav-tabs": tabs,
    "card-header-tabs": card && tabs,
    "nav-pills": pills,
    "card-header-pills": card && pills,
    "nav-justified": justified,
    "nav-fill": fill
  }), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
Nav.propTypes = propTypes$1f;
Nav.defaultProps = defaultProps$1d;
var _excluded$19 = ["className", "cssModule", "active", "tag"];
var propTypes$1e = {
  active: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$1c = {
  tag: "li"
};
function NavItem(props) {
  const {
    className,
    cssModule,
    active,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$19);
  const classes = mapToCssModules((0, import_classnames.default)(className, "nav-item", active ? "active" : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
NavItem.propTypes = propTypes$1e;
NavItem.defaultProps = defaultProps$1c;
var _excluded$18 = ["className", "cssModule", "active", "tag", "innerRef"];
var propTypes$1d = {
  active: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  disabled: import_prop_types7.default.bool,
  href: import_prop_types7.default.any,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  onClick: import_prop_types7.default.func,
  tag: tagPropType
};
var defaultProps$1b = {
  tag: "a"
};
var NavLink = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }
  onClick(e) {
    if (this.props.disabled) {
      e.preventDefault();
      return;
    }
    if (this.props.href === "#") {
      e.preventDefault();
    }
    if (this.props.onClick) {
      this.props.onClick(e);
    }
  }
  render() {
    let _this$props = this.props, {
      className,
      cssModule,
      active,
      tag: Tag,
      innerRef
    } = _this$props, attributes = _objectWithoutProperties(_this$props, _excluded$18);
    const classes = mapToCssModules((0, import_classnames.default)(className, "nav-link", {
      disabled: attributes.disabled,
      active
    }), cssModule);
    return import_react8.default.createElement(Tag, _extends2({}, attributes, {
      ref: innerRef,
      onClick: this.onClick,
      className: classes
    }));
  }
};
NavLink.propTypes = propTypes$1d;
NavLink.defaultProps = defaultProps$1b;
var NavLink$1 = NavLink;
var _excluded$17 = ["className", "listClassName", "cssModule", "children", "tag", "listTag", "aria-label"];
var propTypes$1c = {
  "aria-label": import_prop_types7.default.string,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  listClassName: import_prop_types7.default.string,
  listTag: tagPropType,
  tag: tagPropType
};
var defaultProps$1a = {
  tag: "nav",
  listTag: "ol",
  "aria-label": "breadcrumb"
};
function Breadcrumb(props) {
  const {
    className,
    listClassName,
    cssModule,
    children: children2,
    tag: Tag,
    listTag: ListTag,
    "aria-label": label
  } = props, attributes = _objectWithoutProperties(props, _excluded$17);
  const classes = mapToCssModules((0, import_classnames.default)(className), cssModule);
  const listClasses = mapToCssModules((0, import_classnames.default)("breadcrumb", listClassName), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    "aria-label": label
  }), import_react8.default.createElement(ListTag, {
    className: listClasses
  }, children2));
}
Breadcrumb.propTypes = propTypes$1c;
Breadcrumb.defaultProps = defaultProps$1a;
var _excluded$16 = ["className", "cssModule", "active", "tag"];
var propTypes$1b = {
  active: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$19 = {
  tag: "li"
};
function BreadcrumbItem(props) {
  const {
    className,
    cssModule,
    active,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$16);
  const classes = mapToCssModules((0, import_classnames.default)(className, active ? "active" : false, "breadcrumb-item"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    "aria-current": active ? "page" : void 0
  }));
}
BreadcrumbItem.propTypes = propTypes$1b;
BreadcrumbItem.defaultProps = defaultProps$19;
var _excluded$15 = ["className", "cssModule", "variant", "innerRef"];
var propTypes$1a = {
  active: import_prop_types7.default.bool,
  "aria-label": import_prop_types7.default.string,
  onClick: import_prop_types7.default.func,
  variant: import_prop_types7.default.oneOf(["white"]),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func])
};
var defaultProps$18 = {
  "aria-label": "close"
};
function CloseButton(props) {
  const {
    className,
    cssModule,
    variant,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$15);
  const classes = mapToCssModules((0, import_classnames.default)(className, "btn-close", variant && `btn-close-${variant}`));
  return import_react8.default.createElement("button", _extends2({
    ref: innerRef,
    type: "button",
    className: classes
  }, attributes));
}
CloseButton.propTypes = propTypes$1a;
CloseButton.defaultProps = defaultProps$18;
var _excluded$14 = ["active", "aria-label", "block", "className", "close", "cssModule", "color", "outline", "size", "tag", "innerRef"];
var propTypes$19 = {
  active: import_prop_types7.default.bool,
  "aria-label": import_prop_types7.default.string,
  block: import_prop_types7.default.bool,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  close: import_prop_types7.default.bool,
  color: import_prop_types7.default.string,
  disabled: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  onClick: import_prop_types7.default.func,
  outline: import_prop_types7.default.bool,
  size: import_prop_types7.default.string,
  tag: tagPropType
};
var defaultProps$17 = {
  color: "secondary",
  tag: "button"
};
function Button(props) {
  const onClick = (0, import_react8.useCallback)((e) => {
    if (props.disabled) {
      e.preventDefault();
      return;
    }
    if (props.onClick) {
      return props.onClick(e);
    }
  }, [props.onClick, props.disabled]);
  let {
    active,
    "aria-label": ariaLabel,
    block,
    className,
    close,
    cssModule,
    color,
    outline,
    size,
    tag: Tag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$14);
  if (close) {
    return import_react8.default.createElement(CloseButton, attributes);
  }
  const btnOutlineColor = `btn${outline ? "-outline" : ""}-${color}`;
  const classes = mapToCssModules((0, import_classnames.default)(className, "btn", btnOutlineColor, size ? `btn-${size}` : false, block ? "d-block w-100" : false, {
    active,
    disabled: props.disabled
  }), cssModule);
  if (attributes.href && Tag === "button") {
    Tag = "a";
  }
  return import_react8.default.createElement(Tag, _extends2({
    type: Tag === "button" && attributes.onClick ? "button" : void 0
  }, attributes, {
    className: classes,
    ref: innerRef,
    onClick,
    "aria-label": ariaLabel
  }));
}
Button.propTypes = propTypes$19;
Button.defaultProps = defaultProps$17;
var _excluded$13 = ["className"];
var propTypes$18 = {
  onClick: import_prop_types7.default.func,
  onBlur: import_prop_types7.default.func,
  onFocus: import_prop_types7.default.func,
  defaultValue: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$16 = {
  defaultValue: false
};
function ButtonToggle(props) {
  const [toggled, setToggled] = (0, import_react8.useState)(props.defaultValue);
  const [focus, setFocus] = (0, import_react8.useState)(false);
  const onBlur = (0, import_react8.useCallback)((e) => {
    if (props.onBlur) {
      props.onBlur(e);
    }
    setFocus(false);
  }, [props.onBlur]);
  const onFocus = (0, import_react8.useCallback)((e) => {
    if (props.onFocus) {
      props.onFocus(e);
    }
    setFocus(true);
  }, [props.onFocus]);
  const onClick = (0, import_react8.useCallback)((e) => {
    if (props.onClick) {
      props.onClick(e);
    }
    setToggled(!toggled);
  }, [props.onClick]);
  const {
    className
  } = props, attributes = _objectWithoutProperties(props, _excluded$13);
  const classes = mapToCssModules((0, import_classnames.default)(className, {
    focus
  }), props.cssModule);
  return import_react8.default.createElement(Button, _extends2({
    active: toggled,
    onBlur,
    onFocus,
    onClick,
    className: classes
  }, attributes));
}
ButtonToggle.propTypes = propTypes$18;
ButtonToggle.defaultProps = defaultProps$16;
var DropdownContext = import_react8.default.createContext({});
var InputGroupContext = import_react8.default.createContext({});
var _excluded$12 = ["className", "cssModule", "direction", "isOpen", "group", "size", "nav", "setActiveFromChild", "active", "tag", "menuRole"];
var propTypes$17 = {
  a11y: import_prop_types7.default.bool,
  disabled: import_prop_types7.default.bool,
  direction: import_prop_types7.default.oneOf(["up", "down", "start", "end", "left", "right"]),
  group: import_prop_types7.default.bool,
  isOpen: import_prop_types7.default.bool,
  nav: import_prop_types7.default.bool,
  active: import_prop_types7.default.bool,
  size: import_prop_types7.default.string,
  tag: tagPropType,
  toggle: import_prop_types7.default.func,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  dropup: import_prop_types7.default.bool,
  inNavbar: import_prop_types7.default.bool,
  setActiveFromChild: import_prop_types7.default.bool,
  menuRole: import_prop_types7.default.oneOf(["listbox", "menu"])
};
var defaultProps$15 = {
  a11y: true,
  isOpen: false,
  direction: "down",
  nav: false,
  active: false,
  inNavbar: false,
  setActiveFromChild: false
};
var preventDefaultKeys = [keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down, keyCodes.end, keyCodes.home];
var Dropdown = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.addEvents = this.addEvents.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.removeEvents = this.removeEvents.bind(this);
    this.toggle = this.toggle.bind(this);
    this.handleMenuRef = this.handleMenuRef.bind(this);
    this.handleToggleRef = this.handleToggleRef.bind(this);
    this.containerRef = import_react8.default.createRef();
    this.menuRef = import_react8.default.createRef();
    this.toggleRef = import_react8.default.createRef();
  }
  componentDidMount() {
    this.handleProps();
  }
  componentDidUpdate(prevProps) {
    if (this.props.isOpen !== prevProps.isOpen) {
      this.handleProps();
    }
  }
  componentWillUnmount() {
    this.removeEvents();
  }
  handleMenuRef(menuRef) {
    this.menuRef.current = menuRef;
  }
  handleToggleRef(toggleRef) {
    this.toggleRef.current = toggleRef;
  }
  handleDocumentClick(e) {
    if (e && (e.which === 3 || e.type === "keyup" && e.which !== keyCodes.tab))
      return;
    const container = this.getContainer();
    const menu = this.getMenu();
    const toggle = this.getToggle();
    const targetIsToggle = e.target === toggle;
    const clickIsInMenu = menu && menu.contains(e.target) && menu !== e.target;
    let clickIsInInput = false;
    if (container) {
      clickIsInInput = container.classList.contains("input-group") && container.classList.contains("dropdown") && e.target.tagName === "INPUT";
    }
    if ((targetIsToggle && !clickIsInInput || clickIsInMenu) && (e.type !== "keyup" || e.which === keyCodes.tab)) {
      return;
    }
    this.toggle(e);
  }
  handleKeyDown(e) {
    const isTargetMenuItem = e.target.getAttribute("role") === "menuitem" || e.target.getAttribute("role") === "option";
    const isTargetMenuCtrl = this.getMenuCtrl() === e.target;
    const isTab = keyCodes.tab === e.which;
    if (/input|textarea/i.test(e.target.tagName) || isTab && !this.props.a11y || isTab && !(isTargetMenuItem || isTargetMenuCtrl)) {
      return;
    }
    if (preventDefaultKeys.indexOf(e.which) !== -1 || e.which >= 48 && e.which <= 90) {
      e.preventDefault();
    }
    if (this.props.disabled)
      return;
    if (isTargetMenuCtrl) {
      if ([keyCodes.space, keyCodes.enter, keyCodes.up, keyCodes.down].indexOf(e.which) > -1) {
        if (!this.props.isOpen) {
          this.toggle(e);
        }
        setTimeout(() => this.getMenuItems()[0].focus());
      } else if (this.props.isOpen && isTab) {
        e.preventDefault();
        this.getMenuItems()[0].focus();
      } else if (this.props.isOpen && e.which === keyCodes.esc) {
        this.toggle(e);
      }
    }
    if (this.props.isOpen && isTargetMenuItem) {
      if ([keyCodes.tab, keyCodes.esc].indexOf(e.which) > -1) {
        this.toggle(e);
        this.getMenuCtrl().focus();
      } else if ([keyCodes.space, keyCodes.enter].indexOf(e.which) > -1) {
        e.target.click();
        this.getMenuCtrl().focus();
      } else if ([keyCodes.down, keyCodes.up].indexOf(e.which) > -1 || [keyCodes.n, keyCodes.p].indexOf(e.which) > -1 && e.ctrlKey) {
        const $menuitems = this.getMenuItems();
        let index = $menuitems.indexOf(e.target);
        if (keyCodes.up === e.which || keyCodes.p === e.which && e.ctrlKey) {
          index = index !== 0 ? index - 1 : $menuitems.length - 1;
        } else if (keyCodes.down === e.which || keyCodes.n === e.which && e.ctrlKey) {
          index = index === $menuitems.length - 1 ? 0 : index + 1;
        }
        $menuitems[index].focus();
      } else if (keyCodes.end === e.which) {
        const $menuitems = this.getMenuItems();
        $menuitems[$menuitems.length - 1].focus();
      } else if (keyCodes.home === e.which) {
        const $menuitems = this.getMenuItems();
        $menuitems[0].focus();
      } else if (e.which >= 48 && e.which <= 90) {
        const $menuitems = this.getMenuItems();
        const charPressed = String.fromCharCode(e.which).toLowerCase();
        for (let i = 0; i < $menuitems.length; i += 1) {
          const firstLetter = $menuitems[i].textContent && $menuitems[i].textContent[0].toLowerCase();
          if (firstLetter === charPressed) {
            $menuitems[i].focus();
            break;
          }
        }
      }
    }
  }
  handleProps() {
    if (this.props.isOpen) {
      this.addEvents();
    } else {
      this.removeEvents();
    }
  }
  getContextValue() {
    return {
      toggle: this.toggle,
      isOpen: this.props.isOpen,
      direction: this.props.direction === "down" && this.props.dropup ? "up" : this.props.direction,
      inNavbar: this.props.inNavbar,
      disabled: this.props.disabled,
      onMenuRef: this.handleMenuRef,
      onToggleRef: this.handleToggleRef,
      menuRole: this.props.menuRole
    };
  }
  getContainer() {
    return this.containerRef.current;
  }
  getMenu() {
    return this.menuRef.current;
  }
  getToggle() {
    return this.toggleRef.current;
  }
  getMenuCtrl() {
    if (this._$menuCtrl)
      return this._$menuCtrl;
    this._$menuCtrl = this.getToggle();
    return this._$menuCtrl;
  }
  getItemType() {
    if (this.props.menuRole === "listbox") {
      return "option";
    }
    return "menuitem";
  }
  getMenuItems() {
    const menuContainer = this.getMenu() || this.getContainer();
    return [].slice.call(menuContainer.querySelectorAll(`[role="${this.getItemType()}"]`));
  }
  addEvents() {
    ["click", "touchstart", "keyup"].forEach((event) => document.addEventListener(event, this.handleDocumentClick, true));
  }
  removeEvents() {
    ["click", "touchstart", "keyup"].forEach((event) => document.removeEventListener(event, this.handleDocumentClick, true));
  }
  toggle(e) {
    if (this.props.disabled) {
      return e && e.preventDefault();
    }
    return this.props.toggle(e);
  }
  render() {
    const _omit = omit(this.props, ["toggle", "disabled", "inNavbar", "a11y"]), {
      className,
      cssModule,
      direction,
      isOpen,
      group,
      size,
      nav,
      setActiveFromChild,
      active,
      tag,
      menuRole
    } = _omit, attrs = _objectWithoutProperties(_omit, _excluded$12);
    const Tag = tag || (nav ? "li" : "div");
    let subItemIsActive = false;
    if (setActiveFromChild) {
      import_react8.default.Children.map(this.props.children[1].props.children, (dropdownItem) => {
        if (dropdownItem && dropdownItem.props.active)
          subItemIsActive = true;
      });
    }
    const classes = mapToCssModules((0, import_classnames.default)(className, nav && active ? "active" : false, setActiveFromChild && subItemIsActive ? "active" : false, {
      "btn-group": group,
      [`btn-group-${size}`]: !!size,
      dropdown: !group,
      dropup: direction === "up",
      dropstart: direction === "start" || direction === "left",
      dropend: direction === "end" || direction === "right",
      show: isOpen,
      "nav-item": nav
    }), cssModule);
    if (this.context.insideInputGroup) {
      return import_react8.default.createElement(DropdownContext.Provider, {
        value: this.getContextValue()
      }, import_react8.default.createElement(Manager, null, import_react8.default.Children.map(this.props.children, (child) => import_react8.default.cloneElement(child, {
        onKeyDown: this.handleKeyDown
      }))));
    }
    return import_react8.default.createElement(DropdownContext.Provider, {
      value: this.getContextValue()
    }, import_react8.default.createElement(Manager, null, import_react8.default.createElement(Tag, _extends2({}, attrs, {
      [typeof Tag === "string" ? "ref" : "innerRef"]: this.containerRef,
      onKeyDown: this.handleKeyDown,
      className: classes
    }))));
  }
};
Dropdown.propTypes = propTypes$17;
Dropdown.defaultProps = defaultProps$15;
Dropdown.contextType = InputGroupContext;
var Dropdown$1 = Dropdown;
var propTypes$16 = {
  children: import_prop_types7.default.node
};
function ButtonDropdown(props) {
  return import_react8.default.createElement(Dropdown$1, _extends2({
    group: true
  }, props));
}
ButtonDropdown.propTypes = propTypes$16;
var _excluded$11 = ["className", "cssModule", "size", "vertical", "tag"];
var propTypes$15 = {
  "aria-label": import_prop_types7.default.string,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  role: import_prop_types7.default.string,
  size: import_prop_types7.default.string,
  tag: tagPropType,
  vertical: import_prop_types7.default.bool
};
var defaultProps$14 = {
  tag: "div",
  role: "group"
};
function ButtonGroup(props) {
  const {
    className,
    cssModule,
    size,
    vertical,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$11);
  const classes = mapToCssModules((0, import_classnames.default)(className, size ? "btn-group-" + size : false, vertical ? "btn-group-vertical" : "btn-group"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ButtonGroup.propTypes = propTypes$15;
ButtonGroup.defaultProps = defaultProps$14;
var _excluded$10 = ["className", "cssModule", "tag"];
var propTypes$14 = {
  "aria-label": import_prop_types7.default.string,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  role: import_prop_types7.default.string,
  tag: tagPropType
};
var defaultProps$13 = {
  tag: "div",
  role: "toolbar"
};
function ButtonToolbar(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$10);
  const classes = mapToCssModules((0, import_classnames.default)(className, "btn-toolbar"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ButtonToolbar.propTypes = propTypes$14;
ButtonToolbar.defaultProps = defaultProps$13;
var _excluded$$ = ["className", "cssModule", "divider", "tag", "header", "active", "text"];
var propTypes$13 = {
  children: import_prop_types7.default.node,
  active: import_prop_types7.default.bool,
  disabled: import_prop_types7.default.bool,
  divider: import_prop_types7.default.bool,
  tag: tagPropType,
  header: import_prop_types7.default.bool,
  onClick: import_prop_types7.default.func,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  toggle: import_prop_types7.default.bool,
  text: import_prop_types7.default.bool
};
var defaultProps$12 = {
  tag: "button",
  toggle: true
};
var DropdownItem = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
    this.getTabIndex = this.getTabIndex.bind(this);
  }
  onClick(e) {
    const {
      disabled,
      header,
      divider,
      text
    } = this.props;
    if (disabled || header || divider || text) {
      e.preventDefault();
      return;
    }
    if (this.props.onClick) {
      this.props.onClick(e);
    }
    if (this.props.toggle) {
      this.context.toggle(e);
    }
  }
  getRole() {
    if (this.context.menuRole === "listbox") {
      return "option";
    }
    return "menuitem";
  }
  getTabIndex() {
    const {
      disabled,
      header,
      divider,
      text
    } = this.props;
    if (disabled || header || divider || text) {
      return "-1";
    }
    return "0";
  }
  render() {
    const tabIndex = this.getTabIndex();
    const role = tabIndex > -1 ? this.getRole() : void 0;
    let _omit = omit(this.props, ["toggle"]), {
      className,
      cssModule,
      divider,
      tag: Tag,
      header,
      active,
      text
    } = _omit, props = _objectWithoutProperties(_omit, _excluded$$);
    const classes = mapToCssModules((0, import_classnames.default)(className, {
      disabled: props.disabled,
      "dropdown-item": !divider && !header && !text,
      active,
      "dropdown-header": header,
      "dropdown-divider": divider,
      "dropdown-item-text": text
    }), cssModule);
    if (Tag === "button") {
      if (header) {
        Tag = "h6";
      } else if (divider) {
        Tag = "div";
      } else if (props.href) {
        Tag = "a";
      } else if (text) {
        Tag = "span";
      }
    }
    return import_react8.default.createElement(Tag, _extends2({
      type: Tag === "button" && (props.onClick || this.props.toggle) ? "button" : void 0
    }, props, {
      tabIndex,
      role,
      className: classes,
      onClick: this.onClick
    }));
  }
};
DropdownItem.propTypes = propTypes$13;
DropdownItem.defaultProps = defaultProps$12;
DropdownItem.contextType = DropdownContext;
var DropdownItem$1 = DropdownItem;
var _excluded$_ = ["className", "cssModule", "dark", "end", "right", "tag", "flip", "modifiers", "persist", "strategy", "container", "updateOnSelect"];
var propTypes$12 = {
  tag: tagPropType,
  children: import_prop_types7.default.node.isRequired,
  dark: import_prop_types7.default.bool,
  end: import_prop_types7.default.bool,
  flip: import_prop_types7.default.bool,
  modifiers: import_prop_types7.default.array,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  style: import_prop_types7.default.object,
  persist: import_prop_types7.default.bool,
  strategy: import_prop_types7.default.string,
  container: targetPropType,
  updateOnSelect: import_prop_types7.default.bool,
  right: deprecated(import_prop_types7.default.bool, 'Please use "end" instead.')
};
var defaultProps$11 = {
  tag: "div",
  flip: true,
  modifiers: []
};
var directionPositionMap = {
  up: "top",
  left: "left",
  right: "right",
  start: "left",
  end: "right",
  down: "bottom"
};
var DropdownMenu = class extends import_react8.default.Component {
  getRole() {
    if (this.context.menuRole === "listbox") {
      return "listbox";
    }
    return "menu";
  }
  render() {
    const _this$props = this.props, {
      className,
      cssModule,
      dark,
      end,
      right,
      tag,
      flip,
      modifiers,
      persist,
      strategy,
      container,
      updateOnSelect
    } = _this$props, attrs = _objectWithoutProperties(_this$props, _excluded$_);
    const classes = mapToCssModules((0, import_classnames.default)(className, "dropdown-menu", {
      "dropdown-menu-dark": dark,
      "dropdown-menu-end": end || right,
      show: this.context.isOpen
    }), cssModule);
    const Tag = tag;
    if (persist || this.context.isOpen && !this.context.inNavbar) {
      const position1 = directionPositionMap[this.context.direction] || "bottom";
      const position2 = end || right ? "end" : "start";
      const poperPlacement = `${position1}-${position2}`;
      const poperModifiers = [...modifiers, {
        name: "flip",
        enabled: !!flip
      }];
      const popper = import_react8.default.createElement(Popper, {
        placement: poperPlacement,
        modifiers: poperModifiers,
        strategy
      }, ({
        ref,
        style,
        placement,
        update
      }) => {
        let combinedStyle = _objectSpread2(_objectSpread2({}, this.props.style), style);
        const handleRef = (tagRef) => {
          ref(tagRef);
          const {
            onMenuRef: onMenuRef2
          } = this.context;
          if (onMenuRef2)
            onMenuRef2(tagRef);
        };
        return import_react8.default.createElement(Tag, _extends2({
          tabIndex: "-1",
          role: this.getRole(),
          ref: handleRef
        }, attrs, {
          style: combinedStyle,
          "aria-hidden": !this.context.isOpen,
          className: classes,
          "data-popper-placement": placement,
          onClick: () => updateOnSelect && update()
        }));
      });
      if (container) {
        return import_react_dom3.default.createPortal(popper, getTarget(container));
      }
      return popper;
    }
    const {
      onMenuRef
    } = this.context;
    return import_react8.default.createElement(Tag, _extends2({
      tabIndex: "-1",
      role: this.getRole()
    }, attrs, {
      ref: onMenuRef,
      "aria-hidden": !this.context.isOpen,
      className: classes,
      "data-popper-placement": attrs.placement
    }));
  }
};
DropdownMenu.propTypes = propTypes$12;
DropdownMenu.defaultProps = defaultProps$11;
DropdownMenu.contextType = DropdownContext;
var DropdownMenu$1 = DropdownMenu;
var _excluded$Z = ["className", "color", "cssModule", "caret", "split", "nav", "tag", "innerRef"];
var propTypes$11 = {
  caret: import_prop_types7.default.bool,
  color: import_prop_types7.default.string,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  disabled: import_prop_types7.default.bool,
  onClick: import_prop_types7.default.func,
  "aria-haspopup": import_prop_types7.default.bool,
  split: import_prop_types7.default.bool,
  tag: tagPropType,
  nav: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func])
};
var defaultProps$10 = {
  color: "secondary",
  "aria-haspopup": true
};
var DropdownToggle = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }
  onClick(e) {
    if (this.props.disabled || this.context.disabled) {
      e.preventDefault();
      return;
    }
    if (this.props.nav && !this.props.tag) {
      e.preventDefault();
    }
    if (this.props.onClick) {
      this.props.onClick(e);
    }
    this.context.toggle(e);
  }
  getRole() {
    return this.context.menuRole || this.props["aria-haspopup"];
  }
  render() {
    const _this$props = this.props, {
      className,
      color,
      cssModule,
      caret,
      split,
      nav,
      tag,
      innerRef
    } = _this$props, props = _objectWithoutProperties(_this$props, _excluded$Z);
    const ariaLabel = props["aria-label"] || "Toggle Dropdown";
    const classes = mapToCssModules((0, import_classnames.default)(className, {
      "dropdown-toggle": caret || split,
      "dropdown-toggle-split": split,
      "nav-link": nav
    }), cssModule);
    const children2 = typeof props.children !== "undefined" ? props.children : import_react8.default.createElement("span", {
      className: "visually-hidden"
    }, ariaLabel);
    let Tag;
    if (nav && !tag) {
      Tag = "a";
      props.href = "#";
    } else if (!tag) {
      Tag = Button;
      props.color = color;
      props.cssModule = cssModule;
    } else {
      Tag = tag;
    }
    if (this.context.inNavbar) {
      return import_react8.default.createElement(Tag, _extends2({}, props, {
        className: classes,
        onClick: this.onClick,
        ref: this.context.onToggleRef,
        "aria-expanded": this.context.isOpen,
        "aria-haspopup": this.getRole(),
        children: children2
      }));
    }
    return import_react8.default.createElement(Reference, {
      innerRef
    }, ({
      ref
    }) => {
      const handleRef = (tagRef) => {
        ref(tagRef);
        const {
          onToggleRef
        } = this.context;
        if (onToggleRef)
          onToggleRef(tagRef);
      };
      return import_react8.default.createElement(Tag, _extends2({}, props, {
        [typeof Tag === "string" ? "ref" : "innerRef"]: handleRef,
        className: classes,
        onClick: this.onClick,
        "aria-expanded": this.context.isOpen,
        "aria-haspopup": this.getRole(),
        children: children2
      }));
    });
  }
};
DropdownToggle.propTypes = propTypes$11;
DropdownToggle.defaultProps = defaultProps$10;
DropdownToggle.contextType = DropdownContext;
var DropdownToggle$1 = DropdownToggle;
var _excluded$Y = ["tag", "baseClass", "baseClassActive", "className", "cssModule", "children", "innerRef"];
var propTypes$10 = _objectSpread2(_objectSpread2({}, Transition_default.propTypes), {}, {
  children: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.node), import_prop_types7.default.node]),
  tag: tagPropType,
  baseClass: import_prop_types7.default.string,
  baseClassActive: import_prop_types7.default.string,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func])
});
var defaultProps$$ = _objectSpread2(_objectSpread2({}, Transition_default.defaultProps), {}, {
  tag: "div",
  baseClass: "fade",
  baseClassActive: "show",
  timeout: TransitionTimeouts.Fade,
  appear: true,
  enter: true,
  exit: true,
  in: true
});
function Fade(props) {
  const {
    tag: Tag,
    baseClass,
    baseClassActive,
    className,
    cssModule,
    children: children2,
    innerRef
  } = props, otherProps = _objectWithoutProperties(props, _excluded$Y);
  const transitionProps = pick(otherProps, TransitionPropTypeKeys);
  const childProps = omit(otherProps, TransitionPropTypeKeys);
  return import_react8.default.createElement(Transition_default, transitionProps, (status) => {
    const isActive = status === "entered";
    const classes = mapToCssModules((0, import_classnames.default)(className, baseClass, isActive && baseClassActive), cssModule);
    return import_react8.default.createElement(Tag, _extends2({
      className: classes
    }, childProps, {
      ref: innerRef
    }), children2);
  });
}
Fade.propTypes = propTypes$10;
Fade.defaultProps = defaultProps$$;
var AccordionContext = import_react8.default.createContext({});
var _excluded$X = ["flush", "open", "toggle", "className", "cssModule", "tag", "innerRef"];
var propTypes$$ = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  flush: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  open: import_prop_types7.default.oneOfType([import_prop_types7.default.array, import_prop_types7.default.string]).isRequired,
  tag: tagPropType,
  toggle: import_prop_types7.default.func.isRequired
};
var defaultProps$_ = {
  tag: "div"
};
function Accordion(props) {
  const {
    flush,
    open,
    toggle,
    className,
    cssModule,
    tag: Tag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$X);
  const classes = mapToCssModules((0, import_classnames.default)(className, "accordion", {
    "accordion-flush": flush
  }), cssModule);
  const accordionContext = (0, import_react8.useMemo)(() => ({
    open,
    toggle
  }));
  return import_react8.default.createElement(AccordionContext.Provider, {
    value: accordionContext
  }, import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  })));
}
Accordion.propTypes = propTypes$$;
Accordion.defaultProps = defaultProps$_;
var _excluded$W = ["defaultOpen", "stayOpen"];
var propTypes$_ = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  children: import_prop_types7.default.node,
  defaultOpen: import_prop_types7.default.oneOfType([import_prop_types7.default.array, import_prop_types7.default.string]),
  stayOpen: import_prop_types7.default.bool
};
var defaultProps$Z = {
  tag: "div"
};
function UncontrolledAccordion(_ref) {
  let {
    defaultOpen,
    stayOpen
  } = _ref, props = _objectWithoutProperties(_ref, _excluded$W);
  const [open, setOpen] = (0, import_react8.useState)(defaultOpen || (stayOpen ? [] : void 0));
  const toggle = (id) => {
    if (stayOpen) {
      if (open.includes(id)) {
        setOpen(open.filter((accordionId) => accordionId !== id));
      } else {
        setOpen([...open, id]);
      }
    } else if (open === id) {
      setOpen(void 0);
    } else {
      setOpen(id);
    }
  };
  return import_react8.default.createElement(Accordion, _extends2({}, props, {
    open,
    toggle
  }));
}
UncontrolledAccordion.propTypes = propTypes$_;
UncontrolledAccordion.defaultProps = defaultProps$Z;
var _excluded$V = ["className", "cssModule", "tag", "innerRef", "children", "targetId"];
var propTypes$Z = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  tag: tagPropType,
  targetId: import_prop_types7.default.string.isRequired
};
var defaultProps$Y = {
  tag: "h2"
};
function AccordionHeader(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    innerRef,
    children: children2,
    targetId
  } = props, attributes = _objectWithoutProperties(props, _excluded$V);
  const {
    open,
    toggle
  } = (0, import_react8.useContext)(AccordionContext);
  const classes = mapToCssModules((0, import_classnames.default)(className, "accordion-header"), cssModule);
  const buttonClasses = mapToCssModules((0, import_classnames.default)("accordion-button", {
    collapsed: !(Array.isArray(open) ? open.includes(targetId) : open === targetId)
  }), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }), import_react8.default.createElement("button", {
    type: "button",
    className: buttonClasses,
    onClick: () => toggle(targetId)
  }, children2));
}
AccordionHeader.propTypes = propTypes$Z;
AccordionHeader.defaultProps = defaultProps$Y;
var _excluded$U = ["className", "cssModule", "tag", "innerRef"];
var propTypes$Y = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  tag: tagPropType
};
var defaultProps$X = {
  tag: "div"
};
function AccordionItem(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$U);
  const classes = mapToCssModules((0, import_classnames.default)(className, "accordion-item"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }));
}
AccordionItem.propTypes = propTypes$Y;
AccordionItem.defaultProps = defaultProps$X;
var _excluded$T = ["tag", "horizontal", "isOpen", "className", "navbar", "cssModule", "children", "innerRef"];
var propTypes$X = _objectSpread2(_objectSpread2({}, Transition_default.propTypes), {}, {
  horizontal: import_prop_types7.default.bool,
  isOpen: import_prop_types7.default.bool,
  children: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.node), import_prop_types7.default.node]),
  tag: tagPropType,
  className: import_prop_types7.default.node,
  navbar: import_prop_types7.default.bool,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.shape({
    current: import_prop_types7.default.object
  })
});
var defaultProps$W = _objectSpread2(_objectSpread2({}, Transition_default.defaultProps), {}, {
  horizontal: false,
  isOpen: false,
  appear: false,
  enter: true,
  exit: true,
  tag: "div",
  timeout: TransitionTimeouts.Collapse
});
var transitionStatusToClassHash = {
  [TransitionStatuses.ENTERING]: "collapsing",
  [TransitionStatuses.ENTERED]: "collapse show",
  [TransitionStatuses.EXITING]: "collapsing",
  [TransitionStatuses.EXITED]: "collapse"
};
function getTransitionClass(status) {
  return transitionStatusToClassHash[status] || "collapse";
}
var Collapse = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      dimension: null
    };
    this.nodeRef = props.innerRef || import_react8.default.createRef();
    ["onEntering", "onEntered", "onExit", "onExiting", "onExited"].forEach((name) => {
      this[name] = this[name].bind(this);
    });
  }
  onEntering(_, isAppearing) {
    const node = this.getNode();
    this.setState({
      dimension: this.getDimension(node)
    });
    this.props.onEntering(node, isAppearing);
  }
  onEntered(_, isAppearing) {
    const node = this.getNode();
    this.setState({
      dimension: null
    });
    this.props.onEntered(node, isAppearing);
  }
  onExit() {
    const node = this.getNode();
    this.setState({
      dimension: this.getDimension(node)
    });
    this.props.onExit(node);
  }
  onExiting() {
    const node = this.getNode();
    this.getDimension(node);
    this.setState({
      dimension: 0
    });
    this.props.onExiting(node);
  }
  onExited() {
    const node = this.getNode();
    this.setState({
      dimension: null
    });
    this.props.onExited(node);
  }
  getNode() {
    return this.nodeRef.current;
  }
  getDimension(node) {
    return this.props.horizontal ? node.scrollWidth : node.scrollHeight;
  }
  render() {
    const _this$props = this.props, {
      tag: Tag,
      horizontal,
      isOpen,
      className,
      navbar,
      cssModule,
      children: children2,
      innerRef
    } = _this$props, otherProps = _objectWithoutProperties(_this$props, _excluded$T);
    const {
      dimension
    } = this.state;
    const transitionProps = pick(otherProps, TransitionPropTypeKeys);
    const childProps = omit(otherProps, TransitionPropTypeKeys);
    return import_react8.default.createElement(Transition_default, _extends2({}, transitionProps, {
      in: isOpen,
      nodeRef: this.nodeRef,
      onEntering: this.onEntering,
      onEntered: this.onEntered,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }), (status) => {
      let collapseClass = getTransitionClass(status);
      const classes = mapToCssModules((0, import_classnames.default)(className, horizontal && "collapse-horizontal", collapseClass, navbar && "navbar-collapse"), cssModule);
      const style = dimension === null ? null : {
        [horizontal ? "width" : "height"]: dimension
      };
      return import_react8.default.createElement(Tag, _extends2({}, childProps, {
        style: _objectSpread2(_objectSpread2({}, childProps.style), style),
        className: classes,
        ref: this.nodeRef
      }), children2);
    });
  }
};
Collapse.propTypes = propTypes$X;
Collapse.defaultProps = defaultProps$W;
var Collapse$1 = Collapse;
var _excluded$S = ["className", "cssModule", "tag", "innerRef", "children", "accordionId"];
var propTypes$W = {
  accordionId: import_prop_types7.default.string.isRequired,
  className: import_prop_types7.default.string,
  children: import_prop_types7.default.node,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  tag: tagPropType
};
var defaultProps$V = {
  tag: "div"
};
function AccordionBody(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    innerRef,
    children: children2,
    accordionId
  } = props, attributes = _objectWithoutProperties(props, _excluded$S);
  const {
    open
  } = (0, import_react8.useContext)(AccordionContext);
  const classes = mapToCssModules((0, import_classnames.default)(className, "accordion-collapse"), cssModule);
  return import_react8.default.createElement(Collapse$1, _extends2({}, attributes, {
    className: classes,
    ref: innerRef,
    isOpen: Array.isArray(open) ? open.includes(accordionId) : open === accordionId
  }), import_react8.default.createElement(Tag, {
    className: "accordion-body"
  }, children2));
}
AccordionBody.propTypes = propTypes$W;
AccordionBody.defaultProps = defaultProps$V;
var _excluded$R = ["className", "cssModule", "color", "innerRef", "pill", "tag"];
var propTypes$V = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  color: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  pill: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$U = {
  color: "secondary",
  pill: false,
  tag: "span"
};
function Badge(props) {
  let {
    className,
    cssModule,
    color,
    innerRef,
    pill,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$R);
  const classes = mapToCssModules((0, import_classnames.default)(className, "badge", "bg-" + color, pill ? "rounded-pill" : false), cssModule);
  if (attributes.href && Tag === "span") {
    Tag = "a";
  }
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }));
}
Badge.propTypes = propTypes$V;
Badge.defaultProps = defaultProps$U;
var _excluded$Q = ["className", "cssModule", "color", "body", "inverse", "outline", "tag", "innerRef"];
var propTypes$U = {
  body: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  color: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  inverse: import_prop_types7.default.bool,
  outline: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$T = {
  tag: "div"
};
function Card(props) {
  const {
    className,
    cssModule,
    color,
    body,
    inverse,
    outline,
    tag: Tag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$Q);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card", inverse ? "text-white" : false, body ? "card-body" : false, color ? `${outline ? "border" : "bg"}-${color}` : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }));
}
Card.propTypes = propTypes$U;
Card.defaultProps = defaultProps$T;
var _excluded$P = ["className", "cssModule", "tag"];
var propTypes$T = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$S = {
  tag: "div"
};
function CardGroup(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$P);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-group"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardGroup.propTypes = propTypes$T;
CardGroup.defaultProps = defaultProps$S;
var _excluded$O = ["className", "cssModule", "tag"];
var propTypes$S = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$R = {
  tag: "div"
};
function CardDeck(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$O);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-deck"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardDeck.propTypes = propTypes$S;
CardDeck.defaultProps = defaultProps$R;
var _excluded$N = ["className", "cssModule", "tag"];
var propTypes$R = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$Q = {
  tag: "div"
};
function CardColumns(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$N);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-columns"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardColumns.propTypes = propTypes$R;
CardColumns.defaultProps = defaultProps$Q;
var _excluded$M = ["className", "cssModule", "innerRef", "tag"];
var propTypes$Q = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  tag: tagPropType
};
var defaultProps$P = {
  tag: "div"
};
function CardBody(props) {
  const {
    className,
    cssModule,
    innerRef,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$M);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-body"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }));
}
CardBody.propTypes = propTypes$Q;
CardBody.defaultProps = defaultProps$P;
var _excluded$L = ["className", "cssModule", "tag", "innerRef"];
var propTypes$P = {
  tag: tagPropType,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$O = {
  tag: "a"
};
function CardLink(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$L);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-link"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    ref: innerRef,
    className: classes
  }));
}
CardLink.propTypes = propTypes$P;
CardLink.defaultProps = defaultProps$O;
var _excluded$K = ["className", "cssModule", "tag"];
var propTypes$O = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$N = {
  tag: "div"
};
function CardFooter(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$K);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-footer"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardFooter.propTypes = propTypes$O;
CardFooter.defaultProps = defaultProps$N;
var _excluded$J = ["className", "cssModule", "tag"];
var propTypes$N = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$M = {
  tag: "div"
};
function CardHeader(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$J);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-header"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardHeader.propTypes = propTypes$N;
CardHeader.defaultProps = defaultProps$M;
var _excluded$I = ["className", "cssModule", "top", "bottom", "tag"];
var propTypes$M = {
  bottom: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  top: import_prop_types7.default.bool
};
var defaultProps$L = {
  tag: "img"
};
function CardImg(props) {
  const {
    className,
    cssModule,
    top,
    bottom,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$I);
  let cardImgClassName = "card-img";
  if (top) {
    cardImgClassName = "card-img-top";
  }
  if (bottom) {
    cardImgClassName = "card-img-bottom";
  }
  const classes = mapToCssModules((0, import_classnames.default)(className, cardImgClassName), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardImg.propTypes = propTypes$M;
CardImg.defaultProps = defaultProps$L;
var _excluded$H = ["className", "cssModule", "tag"];
var propTypes$L = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$K = {
  tag: "div"
};
function CardImgOverlay(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$H);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-img-overlay"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardImgOverlay.propTypes = propTypes$L;
CardImgOverlay.defaultProps = defaultProps$K;
var CarouselContext = import_react8.default.createContext({});
var _excluded$G = ["in", "children", "cssModule", "slide", "tag", "className"];
var CarouselItem = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.state = {
      startAnimation: false
    };
    this.onEnter = this.onEnter.bind(this);
    this.onEntering = this.onEntering.bind(this);
    this.onExit = this.onExit.bind(this);
    this.onExiting = this.onExiting.bind(this);
    this.onExited = this.onExited.bind(this);
  }
  onEnter(node, isAppearing) {
    this.setState({
      startAnimation: false
    });
    this.props.onEnter(node, isAppearing);
  }
  onEntering(node, isAppearing) {
    const {
      offsetHeight
    } = node;
    this.setState({
      startAnimation: true
    });
    this.props.onEntering(node, isAppearing);
    return offsetHeight;
  }
  onExit(node) {
    this.setState({
      startAnimation: false
    });
    this.props.onExit(node);
  }
  onExiting(node) {
    this.setState({
      startAnimation: true
    });
    node.dispatchEvent(new CustomEvent("slide.bs.carousel"));
    this.props.onExiting(node);
  }
  onExited(node) {
    node.dispatchEvent(new CustomEvent("slid.bs.carousel"));
    this.props.onExited(node);
  }
  render() {
    const _this$props = this.props, {
      in: isIn,
      children: children2,
      cssModule,
      slide,
      tag: Tag,
      className
    } = _this$props, transitionProps = _objectWithoutProperties(_this$props, _excluded$G);
    return import_react8.default.createElement(Transition_default, _extends2({}, transitionProps, {
      enter: slide,
      exit: slide,
      in: isIn,
      onEnter: this.onEnter,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }), (status) => {
      const {
        direction
      } = this.context;
      const isActive = status === TransitionStatuses.ENTERED || status === TransitionStatuses.EXITING;
      const directionClassName = (status === TransitionStatuses.ENTERING || status === TransitionStatuses.EXITING) && this.state.startAnimation && (direction === "end" ? "carousel-item-start" : "carousel-item-end");
      const orderClassName = status === TransitionStatuses.ENTERING && (direction === "end" ? "carousel-item-next" : "carousel-item-prev");
      const itemClasses = mapToCssModules((0, import_classnames.default)(className, "carousel-item", isActive && "active", directionClassName, orderClassName), cssModule);
      return import_react8.default.createElement(Tag, {
        className: itemClasses
      }, children2);
    });
  }
};
CarouselItem.propTypes = _objectSpread2(_objectSpread2({}, Transition_default.propTypes), {}, {
  tag: tagPropType,
  in: import_prop_types7.default.bool,
  cssModule: import_prop_types7.default.object,
  children: import_prop_types7.default.node,
  slide: import_prop_types7.default.bool,
  className: import_prop_types7.default.string
});
CarouselItem.defaultProps = _objectSpread2(_objectSpread2({}, Transition_default.defaultProps), {}, {
  tag: "div",
  timeout: TransitionTimeouts.Carousel,
  slide: true
});
CarouselItem.contextType = CarouselContext;
var CarouselItem$1 = CarouselItem;
var SWIPE_THRESHOLD = 40;
var propTypes$K = {
  activeIndex: import_prop_types7.default.number,
  next: import_prop_types7.default.func.isRequired,
  previous: import_prop_types7.default.func.isRequired,
  keyboard: import_prop_types7.default.bool,
  pause: import_prop_types7.default.oneOf(["hover", false]),
  ride: import_prop_types7.default.oneOf(["carousel"]),
  interval: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string, import_prop_types7.default.bool]),
  children: import_prop_types7.default.array,
  mouseEnter: import_prop_types7.default.func,
  mouseLeave: import_prop_types7.default.func,
  slide: import_prop_types7.default.bool,
  dark: import_prop_types7.default.bool,
  fade: import_prop_types7.default.bool,
  cssModule: import_prop_types7.default.object,
  className: import_prop_types7.default.string,
  enableTouch: import_prop_types7.default.bool
};
var propsToOmit$2 = Object.keys(propTypes$K);
var defaultProps$J = {
  interval: 5e3,
  pause: "hover",
  keyboard: true,
  slide: true,
  enableTouch: true,
  fade: false
};
var Carousel = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.handleKeyPress = this.handleKeyPress.bind(this);
    this.renderItems = this.renderItems.bind(this);
    this.hoverStart = this.hoverStart.bind(this);
    this.hoverEnd = this.hoverEnd.bind(this);
    this.handleTouchStart = this.handleTouchStart.bind(this);
    this.handleTouchEnd = this.handleTouchEnd.bind(this);
    this.touchStartX = 0;
    this.touchStartY = 0;
    this.state = {
      activeIndex: this.props.activeIndex,
      direction: "end",
      indicatorClicked: false
    };
  }
  componentDidMount() {
    if (this.props.ride === "carousel") {
      this.setInterval();
    }
    document.addEventListener("keyup", this.handleKeyPress);
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    let newState = null;
    let {
      activeIndex,
      direction,
      indicatorClicked
    } = prevState;
    if (nextProps.activeIndex !== activeIndex) {
      if (nextProps.activeIndex === activeIndex + 1) {
        direction = "end";
      } else if (nextProps.activeIndex === activeIndex - 1) {
        direction = "start";
      } else if (nextProps.activeIndex < activeIndex) {
        direction = indicatorClicked ? "start" : "end";
      } else if (nextProps.activeIndex !== activeIndex) {
        direction = indicatorClicked ? "end" : "start";
      }
      newState = {
        activeIndex: nextProps.activeIndex,
        direction,
        indicatorClicked: false
      };
    }
    return newState;
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevState.activeIndex === this.state.activeIndex)
      return;
    this.setInterval();
  }
  componentWillUnmount() {
    this.clearInterval();
    document.removeEventListener("keyup", this.handleKeyPress);
  }
  handleKeyPress(evt) {
    if (this.props.keyboard) {
      if (evt.keyCode === 37) {
        this.props.previous();
      } else if (evt.keyCode === 39) {
        this.props.next();
      }
    }
  }
  handleTouchStart(e) {
    if (!this.props.enableTouch) {
      return;
    }
    this.touchStartX = e.changedTouches[0].screenX;
    this.touchStartY = e.changedTouches[0].screenY;
  }
  handleTouchEnd(e) {
    if (!this.props.enableTouch) {
      return;
    }
    const currentX = e.changedTouches[0].screenX;
    const currentY = e.changedTouches[0].screenY;
    const diffX = Math.abs(this.touchStartX - currentX);
    const diffY = Math.abs(this.touchStartY - currentY);
    if (diffX < diffY) {
      return;
    }
    if (diffX < SWIPE_THRESHOLD) {
      return;
    }
    if (currentX < this.touchStartX) {
      this.props.next();
    } else {
      this.props.previous();
    }
  }
  getContextValue() {
    return {
      direction: this.state.direction
    };
  }
  setInterval() {
    this.clearInterval();
    if (this.props.interval) {
      this.cycleInterval = setInterval(() => {
        this.props.next();
      }, parseInt(this.props.interval, 10));
    }
  }
  clearInterval() {
    clearInterval(this.cycleInterval);
  }
  hoverStart(...args) {
    if (this.props.pause === "hover") {
      this.clearInterval();
    }
    if (this.props.mouseEnter) {
      this.props.mouseEnter(...args);
    }
  }
  hoverEnd(...args) {
    if (this.props.pause === "hover") {
      this.setInterval();
    }
    if (this.props.mouseLeave) {
      this.props.mouseLeave(...args);
    }
  }
  renderItems(carouselItems, className) {
    const {
      slide
    } = this.props;
    return import_react8.default.createElement("div", {
      className
    }, carouselItems.map((item, index) => {
      const isIn = index === this.state.activeIndex;
      return import_react8.default.cloneElement(item, {
        in: isIn,
        slide
      });
    }));
  }
  render() {
    const {
      cssModule,
      slide,
      className,
      dark,
      fade
    } = this.props;
    const attributes = omit(this.props, propsToOmit$2);
    const outerClasses = mapToCssModules((0, import_classnames.default)(className, "carousel", fade && "carousel-fade", slide && "slide", dark && "carousel-dark"), cssModule);
    const innerClasses = mapToCssModules((0, import_classnames.default)("carousel-inner"), cssModule);
    const children2 = this.props.children.filter((child) => child !== null && child !== void 0 && typeof child !== "boolean");
    const slidesOnly = children2.every((child) => child.type === CarouselItem$1);
    if (slidesOnly) {
      return import_react8.default.createElement("div", _extends2({}, attributes, {
        className: outerClasses,
        onMouseEnter: this.hoverStart,
        onMouseLeave: this.hoverEnd
      }), import_react8.default.createElement(CarouselContext.Provider, {
        value: this.getContextValue()
      }, this.renderItems(children2, innerClasses)));
    }
    if (children2[0] instanceof Array) {
      const _carouselItems = children2[0];
      const _controlLeft = children2[1];
      const _controlRight = children2[2];
      return import_react8.default.createElement("div", _extends2({}, attributes, {
        className: outerClasses,
        onMouseEnter: this.hoverStart,
        onMouseLeave: this.hoverEnd
      }), import_react8.default.createElement(CarouselContext.Provider, {
        value: this.getContextValue()
      }, this.renderItems(_carouselItems, innerClasses), _controlLeft, _controlRight));
    }
    const indicators = children2[0];
    const wrappedOnClick = (e) => {
      if (typeof indicators.props.onClickHandler === "function") {
        this.setState({
          indicatorClicked: true
        }, () => indicators.props.onClickHandler(e));
      }
    };
    const wrappedIndicators = import_react8.default.cloneElement(indicators, {
      onClickHandler: wrappedOnClick
    });
    const carouselItems = children2[1];
    const controlLeft = children2[2];
    const controlRight = children2[3];
    return import_react8.default.createElement("div", _extends2({}, attributes, {
      className: outerClasses,
      onMouseEnter: this.hoverStart,
      onMouseLeave: this.hoverEnd,
      onTouchStart: this.handleTouchStart,
      onTouchEnd: this.handleTouchEnd
    }), import_react8.default.createElement(CarouselContext.Provider, {
      value: this.getContextValue()
    }, wrappedIndicators, this.renderItems(carouselItems, innerClasses), controlLeft, controlRight));
  }
};
Carousel.propTypes = propTypes$K;
Carousel.defaultProps = defaultProps$J;
var Carousel$1 = Carousel;
var _excluded$F = ["direction", "onClickHandler", "cssModule", "directionText", "className"];
function CarouselControl(props) {
  const {
    direction,
    onClickHandler,
    cssModule,
    directionText,
    className
  } = props, attributes = _objectWithoutProperties(props, _excluded$F);
  const anchorClasses = mapToCssModules((0, import_classnames.default)(className, `carousel-control-${direction}`), cssModule);
  const iconClasses = mapToCssModules((0, import_classnames.default)(`carousel-control-${direction}-icon`), cssModule);
  const screenReaderClasses = mapToCssModules((0, import_classnames.default)("visually-hidden"), cssModule);
  return import_react8.default.createElement("a", _extends2({}, attributes, {
    className: anchorClasses,
    style: {
      cursor: "pointer"
    },
    role: "button",
    tabIndex: "0",
    onClick: (e) => {
      e.preventDefault();
      onClickHandler();
    }
  }), import_react8.default.createElement("span", {
    className: iconClasses,
    "aria-hidden": "true"
  }), import_react8.default.createElement("span", {
    className: screenReaderClasses
  }, directionText || direction));
}
CarouselControl.propTypes = {
  direction: import_prop_types7.default.oneOf(["prev", "next"]).isRequired,
  onClickHandler: import_prop_types7.default.func.isRequired,
  cssModule: import_prop_types7.default.object,
  directionText: import_prop_types7.default.string,
  className: import_prop_types7.default.string
};
var _excluded$E = ["items", "activeIndex", "cssModule", "onClickHandler", "className"];
function CarouselIndicators(props) {
  const {
    items,
    activeIndex,
    cssModule,
    onClickHandler,
    className
  } = props, attributes = _objectWithoutProperties(props, _excluded$E);
  const listClasses = mapToCssModules((0, import_classnames.default)(className, "carousel-indicators"), cssModule);
  const indicators = items.map((item, idx) => {
    const indicatorClasses = mapToCssModules((0, import_classnames.default)({
      active: activeIndex === idx
    }), cssModule);
    return import_react8.default.createElement("button", {
      "aria-label": item.caption,
      "data-bs-target": true,
      type: "button",
      key: `${item.key || Object.values(item).join("")}`,
      onClick: (e) => {
        e.preventDefault();
        onClickHandler(idx);
      },
      className: indicatorClasses
    });
  });
  return import_react8.default.createElement("div", _extends2({
    className: listClasses
  }, attributes), indicators);
}
CarouselIndicators.propTypes = {
  activeIndex: import_prop_types7.default.number.isRequired,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  items: import_prop_types7.default.array.isRequired,
  onClickHandler: import_prop_types7.default.func.isRequired
};
function CarouselCaption(props) {
  const {
    captionHeader,
    captionText,
    cssModule,
    className
  } = props;
  const classes = mapToCssModules((0, import_classnames.default)(className, "carousel-caption", "d-none", "d-md-block"), cssModule);
  return import_react8.default.createElement("div", {
    className: classes
  }, import_react8.default.createElement("h3", null, captionHeader), import_react8.default.createElement("p", null, captionText));
}
CarouselCaption.propTypes = {
  captionHeader: import_prop_types7.default.node,
  captionText: import_prop_types7.default.node.isRequired,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var _excluded$D = ["defaultActiveIndex", "autoPlay", "indicators", "controls", "items", "goToIndex"];
var propTypes$J = {
  items: import_prop_types7.default.array.isRequired,
  indicators: import_prop_types7.default.bool,
  controls: import_prop_types7.default.bool,
  autoPlay: import_prop_types7.default.bool,
  defaultActiveIndex: import_prop_types7.default.number,
  activeIndex: import_prop_types7.default.number,
  next: import_prop_types7.default.func,
  previous: import_prop_types7.default.func,
  goToIndex: import_prop_types7.default.func
};
var UncontrolledCarousel = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.animating = false;
    this.state = {
      activeIndex: props.defaultActiveIndex || 0
    };
    this.next = this.next.bind(this);
    this.previous = this.previous.bind(this);
    this.goToIndex = this.goToIndex.bind(this);
    this.onExiting = this.onExiting.bind(this);
    this.onExited = this.onExited.bind(this);
  }
  onExiting() {
    this.animating = true;
  }
  onExited() {
    this.animating = false;
  }
  next() {
    if (this.animating)
      return;
    this.setState((prevState) => {
      const nextIndex = prevState.activeIndex === this.props.items.length - 1 ? 0 : prevState.activeIndex + 1;
      return {
        activeIndex: nextIndex
      };
    });
  }
  previous() {
    if (this.animating)
      return;
    this.setState((prevState) => {
      const nextIndex = prevState.activeIndex === 0 ? this.props.items.length - 1 : prevState.activeIndex - 1;
      return {
        activeIndex: nextIndex
      };
    });
  }
  goToIndex(newIndex) {
    if (this.animating)
      return;
    this.setState({
      activeIndex: newIndex
    });
  }
  render() {
    const _this$props = this.props, {
      defaultActiveIndex,
      autoPlay,
      indicators,
      controls,
      items,
      goToIndex
    } = _this$props, props = _objectWithoutProperties(_this$props, _excluded$D);
    const {
      activeIndex
    } = this.state;
    const slides = items.map((item) => {
      const key = item.key || item.src;
      return import_react8.default.createElement(CarouselItem$1, {
        onExiting: this.onExiting,
        onExited: this.onExited,
        key
      }, import_react8.default.createElement("img", {
        className: "d-block w-100",
        src: item.src,
        alt: item.altText
      }), import_react8.default.createElement(CarouselCaption, {
        captionText: item.caption,
        captionHeader: item.header || item.caption
      }));
    });
    return import_react8.default.createElement(Carousel$1, _extends2({
      activeIndex,
      next: this.next,
      previous: this.previous,
      ride: autoPlay ? "carousel" : void 0
    }, props), indicators && import_react8.default.createElement(CarouselIndicators, {
      items,
      activeIndex: props.activeIndex || activeIndex,
      onClickHandler: goToIndex || this.goToIndex
    }), slides, controls && import_react8.default.createElement(CarouselControl, {
      direction: "prev",
      directionText: "Previous",
      onClickHandler: props.previous || this.previous
    }), controls && import_react8.default.createElement(CarouselControl, {
      direction: "next",
      directionText: "Next",
      onClickHandler: props.next || this.next
    }));
  }
};
UncontrolledCarousel.propTypes = propTypes$J;
UncontrolledCarousel.defaultProps = {
  controls: true,
  indicators: true,
  autoPlay: true
};
var UncontrolledCarousel$1 = UncontrolledCarousel;
var _excluded$C = ["className", "cssModule", "tag"];
var propTypes$I = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$I = {
  tag: "div"
};
function CardSubtitle(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$C);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-subtitle"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardSubtitle.propTypes = propTypes$I;
CardSubtitle.defaultProps = defaultProps$I;
var _excluded$B = ["className", "cssModule", "tag"];
var propTypes$H = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$H = {
  tag: "p"
};
function CardText(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$B);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-text"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardText.propTypes = propTypes$H;
CardText.defaultProps = defaultProps$H;
var _excluded$A = ["className", "cssModule", "tag"];
var propTypes$G = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$G = {
  tag: "div"
};
function CardTitle(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$A);
  const classes = mapToCssModules((0, import_classnames.default)(className, "card-title"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
CardTitle.propTypes = propTypes$G;
CardTitle.defaultProps = defaultProps$G;
var _excluded$z = ["cssModule", "children", "isOpen", "flip", "target", "offset", "fallbackPlacements", "placementPrefix", "arrowClassName", "hideArrow", "popperClassName", "tag", "container", "modifiers", "strategy", "boundariesElement", "onClosed", "fade", "transition", "placement"];
function noop$2() {
}
var propTypes$F = {
  children: import_prop_types7.default.oneOfType([import_prop_types7.default.node, import_prop_types7.default.func]).isRequired,
  popperClassName: import_prop_types7.default.string,
  placement: import_prop_types7.default.string,
  placementPrefix: import_prop_types7.default.string,
  arrowClassName: import_prop_types7.default.string,
  hideArrow: import_prop_types7.default.bool,
  tag: tagPropType,
  isOpen: import_prop_types7.default.bool,
  cssModule: import_prop_types7.default.object,
  offset: import_prop_types7.default.arrayOf(import_prop_types7.default.number),
  fallbackPlacements: import_prop_types7.default.array,
  flip: import_prop_types7.default.bool,
  container: targetPropType,
  target: targetPropType.isRequired,
  modifiers: import_prop_types7.default.array,
  strategy: import_prop_types7.default.string,
  boundariesElement: import_prop_types7.default.oneOfType([import_prop_types7.default.string, DOMElement]),
  onClosed: import_prop_types7.default.func,
  fade: import_prop_types7.default.bool,
  transition: import_prop_types7.default.shape(Fade.propTypes)
};
var defaultProps$F = {
  boundariesElement: "scrollParent",
  placement: "auto",
  hideArrow: false,
  isOpen: false,
  offset: [0, 0],
  flip: true,
  container: "body",
  modifiers: [],
  onClosed: noop$2,
  fade: true,
  transition: _objectSpread2({}, Fade.defaultProps)
};
var PopperContent = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.setTargetNode = this.setTargetNode.bind(this);
    this.getTargetNode = this.getTargetNode.bind(this);
    this.getRef = this.getRef.bind(this);
    this.onClosed = this.onClosed.bind(this);
    this.state = {
      isOpen: props.isOpen
    };
  }
  static getDerivedStateFromProps(props, state) {
    if (props.isOpen && !state.isOpen) {
      return {
        isOpen: props.isOpen
      };
    }
    return null;
  }
  componentDidUpdate() {
    if (this._element && this._element.childNodes && this._element.childNodes[0] && this._element.childNodes[0].focus) {
      this._element.childNodes[0].focus();
    }
  }
  onClosed() {
    this.props.onClosed();
    this.setState({
      isOpen: false
    });
  }
  getTargetNode() {
    return this.targetNode;
  }
  getContainerNode() {
    return getTarget(this.props.container);
  }
  getRef(ref) {
    this._element = ref;
  }
  setTargetNode(node) {
    this.targetNode = typeof node === "string" ? getTarget(node) : node;
  }
  renderChildren() {
    const _this$props = this.props, {
      cssModule,
      children: children2,
      isOpen,
      flip,
      target,
      offset,
      fallbackPlacements,
      placementPrefix,
      arrowClassName: _arrowClassName,
      hideArrow,
      popperClassName: _popperClassName,
      tag,
      container,
      modifiers,
      strategy,
      boundariesElement,
      onClosed,
      fade,
      transition,
      placement
    } = _this$props, attrs = _objectWithoutProperties(_this$props, _excluded$z);
    const arrowClassName = mapToCssModules((0, import_classnames.default)("arrow", _arrowClassName), cssModule);
    const popperClassName = mapToCssModules((0, import_classnames.default)(_popperClassName, placementPrefix ? `${placementPrefix}-auto` : ""), this.props.cssModule);
    const modifierNames = modifiers.map((m) => m.name);
    const baseModifiers = [{
      name: "offset",
      options: {
        offset
      }
    }, {
      name: "flip",
      enabled: flip,
      options: {
        fallbackPlacements
      }
    }, {
      name: "preventOverflow",
      options: {
        boundary: boundariesElement
      }
    }].filter((m) => !modifierNames.includes(m.name));
    const extendedModifiers = [...baseModifiers, ...modifiers];
    const popperTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), transition), {}, {
      baseClass: fade ? transition.baseClass : "",
      timeout: fade ? transition.timeout : 0
    });
    return import_react8.default.createElement(Fade, _extends2({}, popperTransition, attrs, {
      in: isOpen,
      onExited: this.onClosed,
      tag
    }), import_react8.default.createElement(Popper, {
      referenceElement: this.targetNode,
      modifiers: extendedModifiers,
      placement,
      strategy
    }, ({
      ref,
      style,
      placement: popperPlacement,
      isReferenceHidden,
      arrowProps,
      update
    }) => import_react8.default.createElement("div", {
      ref,
      style,
      className: popperClassName,
      "data-popper-placement": popperPlacement,
      "data-popper-reference-hidden": isReferenceHidden ? "true" : void 0
    }, typeof children2 === "function" ? children2({
      update
    }) : children2, !hideArrow && import_react8.default.createElement("span", {
      ref: arrowProps.ref,
      className: arrowClassName,
      style: arrowProps.style
    }))));
  }
  render() {
    this.setTargetNode(this.props.target);
    if (this.state.isOpen) {
      return this.props.container === "inline" ? this.renderChildren() : import_react_dom3.default.createPortal(import_react8.default.createElement("div", {
        ref: this.getRef
      }, this.renderChildren()), this.getContainerNode());
    }
    return null;
  }
};
PopperContent.propTypes = propTypes$F;
PopperContent.defaultProps = defaultProps$F;
var PopperContent$1 = PopperContent;
function PopperTargetHelper(props, context) {
  context.popperManager.setTargetNode(getTarget(props.target));
  return null;
}
PopperTargetHelper.contextTypes = {
  popperManager: import_prop_types7.default.object.isRequired
};
PopperTargetHelper.propTypes = {
  target: targetPropType.isRequired
};
var propTypes$E = {
  children: import_prop_types7.default.oneOfType([import_prop_types7.default.node, import_prop_types7.default.func]),
  placement: import_prop_types7.default.oneOf(PopperPlacements),
  target: targetPropType.isRequired,
  container: targetPropType,
  isOpen: import_prop_types7.default.bool,
  disabled: import_prop_types7.default.bool,
  hideArrow: import_prop_types7.default.bool,
  boundariesElement: import_prop_types7.default.oneOfType([import_prop_types7.default.string, DOMElement]),
  className: import_prop_types7.default.string,
  innerClassName: import_prop_types7.default.string,
  arrowClassName: import_prop_types7.default.string,
  popperClassName: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  toggle: import_prop_types7.default.func,
  autohide: import_prop_types7.default.bool,
  placementPrefix: import_prop_types7.default.string,
  delay: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
    show: import_prop_types7.default.number,
    hide: import_prop_types7.default.number
  }), import_prop_types7.default.number]),
  modifiers: import_prop_types7.default.array,
  strategy: import_prop_types7.default.string,
  offset: import_prop_types7.default.arrayOf(import_prop_types7.default.number),
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.string, import_prop_types7.default.object]),
  trigger: import_prop_types7.default.string,
  fade: import_prop_types7.default.bool,
  flip: import_prop_types7.default.bool
};
var DEFAULT_DELAYS = {
  show: 0,
  hide: 50
};
var defaultProps$E = {
  isOpen: false,
  hideArrow: false,
  autohide: false,
  delay: DEFAULT_DELAYS,
  toggle: function() {
  },
  trigger: "click",
  fade: true
};
function isInDOMSubtree(element, subtreeRoot) {
  return subtreeRoot && (element === subtreeRoot || subtreeRoot.contains(element));
}
function isInDOMSubtrees(element, subtreeRoots = []) {
  return subtreeRoots && subtreeRoots.length && subtreeRoots.filter((subTreeRoot) => isInDOMSubtree(element, subTreeRoot))[0];
}
var TooltipPopoverWrapper = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this._targets = [];
    this.currentTargetElement = null;
    this.addTargetEvents = this.addTargetEvents.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.removeTargetEvents = this.removeTargetEvents.bind(this);
    this.toggle = this.toggle.bind(this);
    this.showWithDelay = this.showWithDelay.bind(this);
    this.hideWithDelay = this.hideWithDelay.bind(this);
    this.onMouseOverTooltipContent = this.onMouseOverTooltipContent.bind(this);
    this.onMouseLeaveTooltipContent = this.onMouseLeaveTooltipContent.bind(this);
    this.show = this.show.bind(this);
    this.hide = this.hide.bind(this);
    this.onEscKeyDown = this.onEscKeyDown.bind(this);
    this.getRef = this.getRef.bind(this);
    this.state = {
      isOpen: props.isOpen
    };
    this._isMounted = false;
  }
  componentDidMount() {
    this._isMounted = true;
    this.updateTarget();
  }
  componentWillUnmount() {
    this._isMounted = false;
    this.removeTargetEvents();
    this._targets = null;
    this.clearShowTimeout();
    this.clearHideTimeout();
  }
  static getDerivedStateFromProps(props, state) {
    if (props.isOpen && !state.isOpen) {
      return {
        isOpen: props.isOpen
      };
    }
    return null;
  }
  handleDocumentClick(e) {
    const triggers = this.props.trigger.split(" ");
    if (triggers.indexOf("legacy") > -1 && (this.props.isOpen || isInDOMSubtrees(e.target, this._targets))) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (this.props.isOpen && !isInDOMSubtree(e.target, this._popover)) {
        this.hideWithDelay(e);
      } else if (!this.props.isOpen) {
        this.showWithDelay(e);
      }
    } else if (triggers.indexOf("click") > -1 && isInDOMSubtrees(e.target, this._targets)) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (!this.props.isOpen) {
        this.showWithDelay(e);
      } else {
        this.hideWithDelay(e);
      }
    }
  }
  onMouseOverTooltipContent() {
    if (this.props.trigger.indexOf("hover") > -1 && !this.props.autohide) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (this.state.isOpen && !this.props.isOpen) {
        this.toggle();
      }
    }
  }
  onMouseLeaveTooltipContent(e) {
    if (this.props.trigger.indexOf("hover") > -1 && !this.props.autohide) {
      if (this._showTimeout) {
        this.clearShowTimeout();
      }
      e.persist();
      this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay("hide"));
    }
  }
  onEscKeyDown(e) {
    if (e.key === "Escape") {
      this.hide(e);
    }
  }
  getRef(ref) {
    const {
      innerRef
    } = this.props;
    if (innerRef) {
      if (typeof innerRef === "function") {
        innerRef(ref);
      } else if (typeof innerRef === "object") {
        innerRef.current = ref;
      }
    }
    this._popover = ref;
  }
  getDelay(key) {
    const {
      delay
    } = this.props;
    if (typeof delay === "object") {
      return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];
    }
    return delay;
  }
  getCurrentTarget(target) {
    if (!target)
      return null;
    const index = this._targets.indexOf(target);
    if (index >= 0)
      return this._targets[index];
    return this.getCurrentTarget(target.parentElement);
  }
  show(e) {
    if (!this.props.isOpen) {
      this.clearShowTimeout();
      this.currentTargetElement = e ? e.currentTarget || this.getCurrentTarget(e.target) : null;
      if (e && e.composedPath && typeof e.composedPath === "function") {
        const path = e.composedPath();
        this.currentTargetElement = path && path[0] || this.currentTargetElement;
      }
      this.toggle(e);
    }
  }
  showWithDelay(e) {
    if (this._hideTimeout) {
      this.clearHideTimeout();
    }
    this._showTimeout = setTimeout(this.show.bind(this, e), this.getDelay("show"));
  }
  hide(e) {
    if (this.props.isOpen) {
      this.clearHideTimeout();
      this.currentTargetElement = null;
      this.toggle(e);
    }
  }
  hideWithDelay(e) {
    if (this._showTimeout) {
      this.clearShowTimeout();
    }
    this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay("hide"));
  }
  clearShowTimeout() {
    clearTimeout(this._showTimeout);
    this._showTimeout = void 0;
  }
  clearHideTimeout() {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = void 0;
  }
  addEventOnTargets(type, handler, isBubble) {
    this._targets.forEach((target) => {
      target.addEventListener(type, handler, isBubble);
    });
  }
  removeEventOnTargets(type, handler, isBubble) {
    this._targets.forEach((target) => {
      target.removeEventListener(type, handler, isBubble);
    });
  }
  addTargetEvents() {
    if (this.props.trigger) {
      let triggers = this.props.trigger.split(" ");
      if (triggers.indexOf("manual") === -1) {
        if (triggers.indexOf("click") > -1 || triggers.indexOf("legacy") > -1) {
          document.addEventListener("click", this.handleDocumentClick, true);
        }
        if (this._targets && this._targets.length) {
          if (triggers.indexOf("hover") > -1) {
            this.addEventOnTargets("mouseover", this.showWithDelay, true);
            this.addEventOnTargets("mouseout", this.hideWithDelay, true);
          }
          if (triggers.indexOf("focus") > -1) {
            this.addEventOnTargets("focusin", this.show, true);
            this.addEventOnTargets("focusout", this.hide, true);
          }
          this.addEventOnTargets("keydown", this.onEscKeyDown, true);
        }
      }
    }
  }
  removeTargetEvents() {
    if (this._targets) {
      this.removeEventOnTargets("mouseover", this.showWithDelay, true);
      this.removeEventOnTargets("mouseout", this.hideWithDelay, true);
      this.removeEventOnTargets("keydown", this.onEscKeyDown, true);
      this.removeEventOnTargets("focusin", this.show, true);
      this.removeEventOnTargets("focusout", this.hide, true);
    }
    document.removeEventListener("click", this.handleDocumentClick, true);
  }
  updateTarget() {
    const newTarget = getTarget(this.props.target, true);
    if (newTarget !== this._targets) {
      this.removeTargetEvents();
      this._targets = newTarget ? Array.from(newTarget) : [];
      this.currentTargetElement = this.currentTargetElement || this._targets[0];
      this.addTargetEvents();
    }
  }
  toggle(e) {
    if (this.props.disabled || !this._isMounted) {
      return e && e.preventDefault();
    }
    return this.props.toggle(e);
  }
  render() {
    if (this.props.isOpen) {
      this.updateTarget();
    }
    const target = this.currentTargetElement || this._targets[0];
    if (!target) {
      return null;
    }
    const {
      className,
      cssModule,
      innerClassName,
      isOpen,
      hideArrow,
      boundariesElement,
      placement,
      placementPrefix,
      arrowClassName,
      popperClassName,
      container,
      modifiers,
      strategy,
      offset,
      fade,
      flip,
      children: children2
    } = this.props;
    const attributes = omit(this.props, Object.keys(propTypes$E));
    const popperClasses = mapToCssModules(popperClassName, cssModule);
    const classes = mapToCssModules(innerClassName, cssModule);
    return import_react8.default.createElement(PopperContent$1, {
      className,
      target,
      isOpen,
      hideArrow,
      boundariesElement,
      placement,
      placementPrefix,
      arrowClassName,
      popperClassName: popperClasses,
      container,
      modifiers,
      strategy,
      offset,
      cssModule,
      fade,
      flip
    }, ({
      update
    }) => import_react8.default.createElement("div", _extends2({}, attributes, {
      ref: this.getRef,
      className: classes,
      role: "tooltip",
      onMouseOver: this.onMouseOverTooltipContent,
      onMouseLeave: this.onMouseLeaveTooltipContent,
      onKeyDown: this.onEscKeyDown
    }), typeof children2 === "function" ? children2({
      update
    }) : children2));
  }
};
TooltipPopoverWrapper.propTypes = propTypes$E;
TooltipPopoverWrapper.defaultProps = defaultProps$E;
var TooltipPopoverWrapper$1 = TooltipPopoverWrapper;
var defaultProps$D = {
  placement: "right",
  placementPrefix: "bs-popover",
  trigger: "click",
  offset: [0, 8]
};
function Popover(props) {
  const popperClasses = (0, import_classnames.default)("popover", "show", props.popperClassName);
  const classes = (0, import_classnames.default)("popover-inner", props.innerClassName);
  return import_react8.default.createElement(TooltipPopoverWrapper$1, _extends2({}, props, {
    arrowClassName: "popover-arrow",
    popperClassName: popperClasses,
    innerClassName: classes
  }));
}
Popover.propTypes = propTypes$E;
Popover.defaultProps = defaultProps$D;
var omitKeys$4 = ["defaultOpen"];
var UncontrolledPopover = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: props.defaultOpen || false
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState((prevState) => ({
      isOpen: !prevState.isOpen
    }));
  }
  render() {
    return import_react8.default.createElement(Popover, _extends2({
      isOpen: this.state.isOpen,
      toggle: this.toggle
    }, omit(this.props, omitKeys$4)));
  }
};
UncontrolledPopover.propTypes = _objectSpread2({
  defaultOpen: import_prop_types7.default.bool
}, Popover.propTypes);
var _excluded$y = ["className", "cssModule", "tag"];
var propTypes$D = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$C = {
  tag: "h3"
};
function PopoverHeader(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$y);
  const classes = mapToCssModules((0, import_classnames.default)(className, "popover-header"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
PopoverHeader.propTypes = propTypes$D;
PopoverHeader.defaultProps = defaultProps$C;
var _excluded$x = ["className", "cssModule", "tag"];
var propTypes$C = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$B = {
  tag: "div"
};
function PopoverBody(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$x);
  const classes = mapToCssModules((0, import_classnames.default)(className, "popover-body"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
PopoverBody.propTypes = propTypes$C;
PopoverBody.defaultProps = defaultProps$B;
var _excluded$w = ["children", "className", "barClassName", "cssModule", "value", "min", "max", "animated", "striped", "color", "bar", "multi", "tag", "style", "barStyle", "barAriaValueText", "barAriaLabelledBy"];
var propTypes$B = {
  animated: import_prop_types7.default.bool,
  bar: import_prop_types7.default.bool,
  barAriaLabelledBy: import_prop_types7.default.string,
  barAriaValueText: import_prop_types7.default.string,
  barClassName: import_prop_types7.default.string,
  barStyle: import_prop_types7.default.object,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  color: import_prop_types7.default.string,
  max: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.number]),
  min: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.number]),
  multi: import_prop_types7.default.bool,
  striped: import_prop_types7.default.bool,
  style: import_prop_types7.default.object,
  tag: tagPropType,
  value: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.number])
};
var defaultProps$A = {
  tag: "div",
  value: 0,
  min: 0,
  max: 100,
  style: {},
  barStyle: {}
};
function Progress(props) {
  const {
    children: children2,
    className,
    barClassName,
    cssModule,
    value,
    min,
    max,
    animated,
    striped,
    color,
    bar,
    multi,
    tag: Tag,
    style,
    barStyle,
    barAriaValueText,
    barAriaLabelledBy
  } = props, attributes = _objectWithoutProperties(props, _excluded$w);
  const percent = toNumber(value) / toNumber(max) * 100;
  const progressClasses = mapToCssModules((0, import_classnames.default)(className, "progress"), cssModule);
  const progressBarClasses = mapToCssModules((0, import_classnames.default)("progress-bar", bar ? className || barClassName : barClassName, animated ? "progress-bar-animated" : null, color ? `bg-${color}` : null, striped || animated ? "progress-bar-striped" : null), cssModule);
  const progressBarProps = {
    className: progressBarClasses,
    style: _objectSpread2(_objectSpread2(_objectSpread2({}, bar ? style : {}), barStyle), {}, {
      width: `${percent}%`
    }),
    role: "progressbar",
    "aria-valuenow": value,
    "aria-valuemin": min,
    "aria-valuemax": max,
    "aria-valuetext": barAriaValueText,
    "aria-labelledby": barAriaLabelledBy,
    children: children2
  };
  if (bar) {
    return import_react8.default.createElement(Tag, _extends2({}, attributes, progressBarProps));
  }
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    style,
    className: progressClasses
  }), multi ? children2 : import_react8.default.createElement("div", progressBarProps));
}
Progress.propTypes = propTypes$B;
Progress.defaultProps = defaultProps$A;
var propTypes$A = {
  children: import_prop_types7.default.node.isRequired,
  node: import_prop_types7.default.any
};
var Portal = class extends import_react8.default.Component {
  componentWillUnmount() {
    if (this.defaultNode) {
      document.body.removeChild(this.defaultNode);
    }
    this.defaultNode = null;
  }
  render() {
    if (!canUseDOM) {
      return null;
    }
    if (!this.props.node && !this.defaultNode) {
      this.defaultNode = document.createElement("div");
      document.body.appendChild(this.defaultNode);
    }
    return import_react_dom3.default.createPortal(this.props.children, this.props.node || this.defaultNode);
  }
};
Portal.propTypes = propTypes$A;
var Portal$1 = Portal;
function noop$1() {
}
var FadePropTypes$1 = import_prop_types7.default.shape(Fade.propTypes);
var propTypes$z = {
  autoFocus: import_prop_types7.default.bool,
  backdrop: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.oneOf(["static"])]),
  backdropClassName: import_prop_types7.default.string,
  backdropTransition: FadePropTypes$1,
  centered: import_prop_types7.default.bool,
  children: import_prop_types7.default.node,
  contentClassName: import_prop_types7.default.string,
  className: import_prop_types7.default.string,
  container: targetPropType,
  cssModule: import_prop_types7.default.object,
  external: import_prop_types7.default.node,
  fade: import_prop_types7.default.bool,
  fullscreen: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.oneOf(["sm", "md", "lg", "xl"])]),
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  isOpen: import_prop_types7.default.bool,
  keyboard: import_prop_types7.default.bool,
  labelledBy: import_prop_types7.default.string,
  modalClassName: import_prop_types7.default.string,
  modalTransition: FadePropTypes$1,
  onClosed: import_prop_types7.default.func,
  onEnter: import_prop_types7.default.func,
  onExit: import_prop_types7.default.func,
  onOpened: import_prop_types7.default.func,
  returnFocusAfterClose: import_prop_types7.default.bool,
  role: import_prop_types7.default.string,
  scrollable: import_prop_types7.default.bool,
  size: import_prop_types7.default.string,
  toggle: import_prop_types7.default.func,
  trapFocus: import_prop_types7.default.bool,
  unmountOnClose: import_prop_types7.default.bool,
  wrapClassName: import_prop_types7.default.string,
  zIndex: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string])
};
var propsToOmit$1 = Object.keys(propTypes$z);
var defaultProps$z = {
  isOpen: false,
  autoFocus: true,
  centered: false,
  scrollable: false,
  role: "dialog",
  backdrop: true,
  keyboard: true,
  zIndex: 1050,
  fade: true,
  onOpened: noop$1,
  onClosed: noop$1,
  modalTransition: {
    timeout: TransitionTimeouts.Modal
  },
  backdropTransition: {
    mountOnEnter: true,
    timeout: TransitionTimeouts.Fade
  },
  unmountOnClose: true,
  returnFocusAfterClose: true,
  container: "body",
  trapFocus: false
};
var Modal = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this._element = null;
    this._originalBodyPadding = null;
    this.getFocusableChildren = this.getFocusableChildren.bind(this);
    this.handleBackdropClick = this.handleBackdropClick.bind(this);
    this.handleBackdropMouseDown = this.handleBackdropMouseDown.bind(this);
    this.handleEscape = this.handleEscape.bind(this);
    this.handleStaticBackdropAnimation = this.handleStaticBackdropAnimation.bind(this);
    this.handleTab = this.handleTab.bind(this);
    this.onOpened = this.onOpened.bind(this);
    this.onClosed = this.onClosed.bind(this);
    this.manageFocusAfterClose = this.manageFocusAfterClose.bind(this);
    this.clearBackdropAnimationTimeout = this.clearBackdropAnimationTimeout.bind(this);
    this.trapFocus = this.trapFocus.bind(this);
    this.state = {
      isOpen: false,
      showStaticBackdropAnimation: false
    };
  }
  componentDidMount() {
    const {
      isOpen,
      autoFocus,
      onEnter
    } = this.props;
    if (isOpen) {
      this.init();
      this.setState({
        isOpen: true
      });
      if (autoFocus) {
        this.setFocus();
      }
    }
    if (onEnter) {
      onEnter();
    }
    document.addEventListener("focus", this.trapFocus, true);
    this._isMounted = true;
  }
  componentDidUpdate(prevProps, prevState) {
    if (this.props.isOpen && !prevProps.isOpen) {
      this.init();
      this.setState({
        isOpen: true
      });
      return;
    }
    if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {
      this.setFocus();
    }
    if (this._element && prevProps.zIndex !== this.props.zIndex) {
      this._element.style.zIndex = this.props.zIndex;
    }
  }
  componentWillUnmount() {
    this.clearBackdropAnimationTimeout();
    if (this.props.onExit) {
      this.props.onExit();
    }
    if (this._element) {
      this.destroy();
      if (this.props.isOpen || this.state.isOpen) {
        this.close();
      }
    }
    document.removeEventListener("focus", this.trapFocus, true);
    this._isMounted = false;
  }
  handleBackdropClick(e) {
    if (e.target === this._mouseDownElement) {
      e.stopPropagation();
      const backdrop = this._dialog ? this._dialog.parentNode : null;
      if (backdrop && e.target === backdrop && this.props.backdrop === "static") {
        this.handleStaticBackdropAnimation();
      }
      if (!this.props.isOpen || this.props.backdrop !== true)
        return;
      if (backdrop && e.target === backdrop && this.props.toggle) {
        this.props.toggle(e);
      }
    }
  }
  handleTab(e) {
    if (e.which !== 9)
      return;
    if (this.modalIndex < Modal.openCount - 1)
      return;
    const focusableChildren = this.getFocusableChildren();
    const totalFocusable = focusableChildren.length;
    if (totalFocusable === 0)
      return;
    const currentFocus = this.getFocusedChild();
    let focusedIndex = 0;
    for (let i = 0; i < totalFocusable; i += 1) {
      if (focusableChildren[i] === currentFocus) {
        focusedIndex = i;
        break;
      }
    }
    if (e.shiftKey && focusedIndex === 0) {
      e.preventDefault();
      focusableChildren[totalFocusable - 1].focus();
    } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {
      e.preventDefault();
      focusableChildren[0].focus();
    }
  }
  handleBackdropMouseDown(e) {
    this._mouseDownElement = e.target;
  }
  handleEscape(e) {
    if (this.props.isOpen && e.keyCode === keyCodes.esc && this.props.toggle) {
      if (this.props.keyboard) {
        e.preventDefault();
        e.stopPropagation();
        this.props.toggle(e);
      } else if (this.props.backdrop === "static") {
        e.preventDefault();
        e.stopPropagation();
        this.handleStaticBackdropAnimation();
      }
    }
  }
  handleStaticBackdropAnimation() {
    this.clearBackdropAnimationTimeout();
    this.setState({
      showStaticBackdropAnimation: true
    });
    this._backdropAnimationTimeout = setTimeout(() => {
      this.setState({
        showStaticBackdropAnimation: false
      });
    }, 100);
  }
  onOpened(node, isAppearing) {
    this.props.onOpened();
    (this.props.modalTransition.onEntered || noop$1)(node, isAppearing);
  }
  onClosed(node) {
    const {
      unmountOnClose
    } = this.props;
    this.props.onClosed();
    (this.props.modalTransition.onExited || noop$1)(node);
    if (unmountOnClose) {
      this.destroy();
    }
    this.close();
    if (this._isMounted) {
      this.setState({
        isOpen: false
      });
    }
  }
  setFocus() {
    if (this._dialog && this._dialog.parentNode && typeof this._dialog.parentNode.focus === "function") {
      this._dialog.parentNode.focus();
    }
  }
  getFocusableChildren() {
    return this._element.querySelectorAll(focusableElements.join(", "));
  }
  getFocusedChild() {
    let currentFocus;
    const focusableChildren = this.getFocusableChildren();
    try {
      currentFocus = document.activeElement;
    } catch (err) {
      currentFocus = focusableChildren[0];
    }
    return currentFocus;
  }
  trapFocus(ev) {
    if (!this.props.trapFocus) {
      return;
    }
    if (!this._element) {
      return;
    }
    if (this._dialog && this._dialog.parentNode === ev.target) {
      return;
    }
    if (this.modalIndex < Modal.openCount - 1) {
      return;
    }
    const children2 = this.getFocusableChildren();
    for (let i = 0; i < children2.length; i += 1) {
      if (children2[i] === ev.target)
        return;
    }
    if (children2.length > 0) {
      ev.preventDefault();
      ev.stopPropagation();
      children2[0].focus();
    }
  }
  init() {
    try {
      this._triggeringElement = document.activeElement;
    } catch (err) {
      this._triggeringElement = null;
    }
    if (!this._element) {
      this._element = document.createElement("div");
      this._element.setAttribute("tabindex", "-1");
      this._element.style.position = "relative";
      this._element.style.zIndex = this.props.zIndex;
      this._mountContainer = getTarget(this.props.container);
      this._mountContainer.appendChild(this._element);
    }
    this._originalBodyPadding = getOriginalBodyPadding();
    if (Modal.openCount < 1) {
      Modal.originalBodyOverflow = window.getComputedStyle(document.body).overflow;
    }
    conditionallyUpdateScrollbar();
    if (Modal.openCount === 0) {
      document.body.className = (0, import_classnames.default)(document.body.className, mapToCssModules("modal-open", this.props.cssModule));
      document.body.style.overflow = "hidden";
    }
    this.modalIndex = Modal.openCount;
    Modal.openCount += 1;
  }
  destroy() {
    if (this._element) {
      this._mountContainer.removeChild(this._element);
      this._element = null;
    }
    this.manageFocusAfterClose();
  }
  manageFocusAfterClose() {
    if (this._triggeringElement) {
      const {
        returnFocusAfterClose
      } = this.props;
      if (this._triggeringElement.focus && returnFocusAfterClose)
        this._triggeringElement.focus();
      this._triggeringElement = null;
    }
  }
  close() {
    if (Modal.openCount <= 1) {
      const modalOpenClassName = mapToCssModules("modal-open", this.props.cssModule);
      const modalOpenClassNameRegex = new RegExp(`(^| )${modalOpenClassName}( |$)`);
      document.body.className = document.body.className.replace(modalOpenClassNameRegex, " ").trim();
      document.body.style.overflow = Modal.originalBodyOverflow;
    }
    this.manageFocusAfterClose();
    Modal.openCount = Math.max(0, Modal.openCount - 1);
    setScrollbarWidth(this._originalBodyPadding);
  }
  clearBackdropAnimationTimeout() {
    if (this._backdropAnimationTimeout) {
      clearTimeout(this._backdropAnimationTimeout);
      this._backdropAnimationTimeout = void 0;
    }
  }
  renderModalDialog() {
    const attributes = omit(this.props, propsToOmit$1);
    const dialogBaseClass = "modal-dialog";
    return import_react8.default.createElement("div", _extends2({}, attributes, {
      className: mapToCssModules((0, import_classnames.default)(dialogBaseClass, this.props.className, {
        [`modal-${this.props.size}`]: this.props.size,
        [`${dialogBaseClass}-centered`]: this.props.centered,
        [`${dialogBaseClass}-scrollable`]: this.props.scrollable,
        "modal-fullscreen": this.props.fullscreen === true,
        [`modal-fullscreen-${this.props.fullscreen}-down`]: typeof this.props.fullscreen === "string"
      }), this.props.cssModule),
      role: "document",
      ref: (c) => {
        this._dialog = c;
      }
    }), import_react8.default.createElement("div", {
      className: mapToCssModules((0, import_classnames.default)("modal-content", this.props.contentClassName), this.props.cssModule)
    }, this.props.children));
  }
  render() {
    const {
      unmountOnClose
    } = this.props;
    if (!!this._element && (this.state.isOpen || !unmountOnClose)) {
      const isModalHidden = !!this._element && !this.state.isOpen && !unmountOnClose;
      this._element.style.display = isModalHidden ? "none" : "block";
      const {
        wrapClassName,
        modalClassName,
        backdropClassName,
        cssModule,
        isOpen,
        backdrop,
        role,
        labelledBy,
        external,
        innerRef
      } = this.props;
      const modalAttributes = {
        onClick: this.handleBackdropClick,
        onMouseDown: this.handleBackdropMouseDown,
        onKeyUp: this.handleEscape,
        onKeyDown: this.handleTab,
        style: {
          display: "block"
        },
        "aria-labelledby": labelledBy,
        role,
        tabIndex: "-1"
      };
      const hasTransition = this.props.fade;
      const modalTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), this.props.modalTransition), {}, {
        baseClass: hasTransition ? this.props.modalTransition.baseClass : "",
        timeout: hasTransition ? this.props.modalTransition.timeout : 0
      });
      const backdropTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), this.props.backdropTransition), {}, {
        baseClass: hasTransition ? this.props.backdropTransition.baseClass : "",
        timeout: hasTransition ? this.props.backdropTransition.timeout : 0
      });
      const Backdrop = backdrop && (hasTransition ? import_react8.default.createElement(Fade, _extends2({}, backdropTransition, {
        in: isOpen && !!backdrop,
        cssModule,
        className: mapToCssModules((0, import_classnames.default)("modal-backdrop", backdropClassName), cssModule)
      })) : import_react8.default.createElement("div", {
        className: mapToCssModules((0, import_classnames.default)("modal-backdrop", "show", backdropClassName), cssModule)
      }));
      return import_react8.default.createElement(Portal$1, {
        node: this._element
      }, import_react8.default.createElement("div", {
        className: mapToCssModules(wrapClassName)
      }, import_react8.default.createElement(Fade, _extends2({}, modalAttributes, modalTransition, {
        in: isOpen,
        onEntered: this.onOpened,
        onExited: this.onClosed,
        cssModule,
        className: mapToCssModules((0, import_classnames.default)("modal", modalClassName, this.state.showStaticBackdropAnimation && "modal-static"), cssModule),
        innerRef
      }), external, this.renderModalDialog()), Backdrop));
    }
    return null;
  }
};
Modal.propTypes = propTypes$z;
Modal.defaultProps = defaultProps$z;
Modal.openCount = 0;
Modal.originalBodyOverflow = null;
var Modal$1 = Modal;
var _excluded$v = ["className", "cssModule", "children", "toggle", "tag", "wrapTag", "closeAriaLabel", "close"];
var propTypes$y = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  close: import_prop_types7.default.object,
  closeAriaLabel: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  toggle: import_prop_types7.default.func,
  wrapTag: tagPropType
};
var defaultProps$y = {
  tag: "h5",
  wrapTag: "div",
  closeAriaLabel: "Close"
};
function ModalHeader(props) {
  let closeButton;
  const {
    className,
    cssModule,
    children: children2,
    toggle,
    tag: Tag,
    wrapTag: WrapTag,
    closeAriaLabel,
    close
  } = props, attributes = _objectWithoutProperties(props, _excluded$v);
  const classes = mapToCssModules((0, import_classnames.default)(className, "modal-header"), cssModule);
  if (!close && toggle) {
    closeButton = import_react8.default.createElement("button", {
      type: "button",
      onClick: toggle,
      className: mapToCssModules("btn-close", cssModule),
      "aria-label": closeAriaLabel
    });
  }
  return import_react8.default.createElement(WrapTag, _extends2({}, attributes, {
    className: classes
  }), import_react8.default.createElement(Tag, {
    className: mapToCssModules("modal-title", cssModule)
  }, children2), close || closeButton);
}
ModalHeader.propTypes = propTypes$y;
ModalHeader.defaultProps = defaultProps$y;
var _excluded$u = ["className", "cssModule", "tag"];
var propTypes$x = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$x = {
  tag: "div"
};
function ModalBody(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$u);
  const classes = mapToCssModules((0, import_classnames.default)(className, "modal-body"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ModalBody.propTypes = propTypes$x;
ModalBody.defaultProps = defaultProps$x;
var _excluded$t = ["className", "cssModule", "tag"];
var propTypes$w = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$w = {
  tag: "div"
};
function ModalFooter(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$t);
  const classes = mapToCssModules((0, import_classnames.default)(className, "modal-footer"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ModalFooter.propTypes = propTypes$w;
ModalFooter.defaultProps = defaultProps$w;
var defaultProps$v = {
  placement: "top",
  autohide: true,
  placementPrefix: "bs-tooltip",
  trigger: "hover focus"
};
function Tooltip(props) {
  const popperClasses = (0, import_classnames.default)("tooltip", "show", props.popperClassName);
  const classes = (0, import_classnames.default)("tooltip-inner", props.innerClassName);
  return import_react8.default.createElement(TooltipPopoverWrapper$1, _extends2({}, props, {
    arrowClassName: "tooltip-arrow",
    popperClassName: popperClasses,
    innerClassName: classes
  }));
}
Tooltip.propTypes = propTypes$E;
Tooltip.defaultProps = defaultProps$v;
var _excluded$s = ["className", "cssModule", "size", "bordered", "borderless", "striped", "dark", "hover", "responsive", "tag", "responsiveTag", "innerRef"];
var propTypes$v = {
  bordered: import_prop_types7.default.bool,
  borderless: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  dark: import_prop_types7.default.bool,
  hover: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.string, import_prop_types7.default.object]),
  responsive: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string]),
  responsiveTag: tagPropType,
  size: import_prop_types7.default.string,
  striped: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$u = {
  tag: "table",
  responsiveTag: "div"
};
function Table(props) {
  const {
    className,
    cssModule,
    size,
    bordered,
    borderless,
    striped,
    dark,
    hover,
    responsive,
    tag: Tag,
    responsiveTag: ResponsiveTag,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$s);
  const classes = mapToCssModules((0, import_classnames.default)(className, "table", size ? "table-" + size : false, bordered ? "table-bordered" : false, borderless ? "table-borderless" : false, striped ? "table-striped" : false, dark ? "table-dark" : false, hover ? "table-hover" : false), cssModule);
  const table = import_react8.default.createElement(Tag, _extends2({}, attributes, {
    ref: innerRef,
    className: classes
  }));
  if (responsive) {
    const responsiveClassName = mapToCssModules(responsive === true ? "table-responsive" : `table-responsive-${responsive}`, cssModule);
    return import_react8.default.createElement(ResponsiveTag, {
      className: responsiveClassName
    }, table);
  }
  return table;
}
Table.propTypes = propTypes$v;
Table.defaultProps = defaultProps$u;
var _excluded$r = ["className", "cssModule", "tag", "flush", "horizontal", "numbered"];
var propTypes$u = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  flush: import_prop_types7.default.bool,
  horizontal: import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string]),
  numbered: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$t = {
  tag: "ul",
  horizontal: false,
  numbered: false
};
var getHorizontalClass = (horizontal) => {
  if (horizontal === false) {
    return false;
  }
  if (horizontal === true || horizontal === "xs") {
    return "list-group-horizontal";
  }
  return `list-group-horizontal-${horizontal}`;
};
function ListGroup(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    flush,
    horizontal,
    numbered
  } = props, attributes = _objectWithoutProperties(props, _excluded$r);
  const classes = mapToCssModules((0, import_classnames.default)(
    className,
    "list-group",
    flush ? "list-group-flush" : getHorizontalClass(horizontal),
    {
      "list-group-numbered": numbered
    }
  ), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ListGroup.propTypes = propTypes$u;
ListGroup.defaultProps = defaultProps$t;
var _excluded$q = ["className", "cssModule", "tag", "innerRef"];
var propTypes$t = {
  children: import_prop_types7.default.node,
  tag: tagPropType,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$s = {
  tag: "form"
};
var Form = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.getRef = this.getRef.bind(this);
    this.submit = this.submit.bind(this);
  }
  getRef(ref) {
    if (this.props.innerRef) {
      this.props.innerRef(ref);
    }
    this.ref = ref;
  }
  submit() {
    if (this.ref) {
      this.ref.submit();
    }
  }
  render() {
    const _this$props = this.props, {
      className,
      cssModule,
      tag: Tag,
      innerRef
    } = _this$props, attributes = _objectWithoutProperties(_this$props, _excluded$q);
    const classes = mapToCssModules(className, cssModule);
    return import_react8.default.createElement(Tag, _extends2({}, attributes, {
      ref: innerRef,
      className: classes
    }));
  }
};
Form.propTypes = propTypes$t;
Form.defaultProps = defaultProps$s;
var Form$1 = Form;
var _excluded$p = ["className", "cssModule", "valid", "tooltip", "tag"];
var propTypes$s = {
  children: import_prop_types7.default.node,
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  valid: import_prop_types7.default.bool,
  tooltip: import_prop_types7.default.bool
};
var defaultProps$r = {
  tag: "div",
  valid: void 0
};
function FormFeedback(props) {
  const {
    className,
    cssModule,
    valid,
    tooltip,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$p);
  const validMode = tooltip ? "tooltip" : "feedback";
  const classes = mapToCssModules((0, import_classnames.default)(className, valid ? `valid-${validMode}` : `invalid-${validMode}`), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
FormFeedback.propTypes = propTypes$s;
FormFeedback.defaultProps = defaultProps$r;
var _excluded$o = ["className", "cssModule", "row", "disabled", "check", "inline", "floating", "tag", "switch"];
var propTypes$r = {
  children: import_prop_types7.default.node,
  row: import_prop_types7.default.bool,
  check: import_prop_types7.default.bool,
  switch: import_prop_types7.default.bool,
  inline: import_prop_types7.default.bool,
  floating: import_prop_types7.default.bool,
  disabled: import_prop_types7.default.bool,
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$q = {
  tag: "div"
};
function FormGroup(props) {
  const {
    className,
    cssModule,
    row,
    disabled,
    check,
    inline,
    floating,
    tag: Tag,
    switch: switchProp
  } = props, attributes = _objectWithoutProperties(props, _excluded$o);
  const formCheck = check || switchProp;
  const classes = mapToCssModules((0, import_classnames.default)(className, row ? "row" : false, formCheck ? "form-check" : "mb-3", switchProp ? "form-switch" : false, formCheck && inline ? "form-check-inline" : false, formCheck && disabled ? "disabled" : false, floating && "form-floating"), cssModule);
  if (Tag === "fieldset") {
    attributes.disabled = disabled;
  }
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
FormGroup.propTypes = propTypes$r;
FormGroup.defaultProps = defaultProps$q;
var _excluded$n = ["className", "cssModule", "inline", "color", "tag"];
var propTypes$q = {
  children: import_prop_types7.default.node,
  inline: import_prop_types7.default.bool,
  tag: tagPropType,
  color: import_prop_types7.default.string,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$p = {
  tag: "small",
  color: "muted"
};
function FormText(props) {
  const {
    className,
    cssModule,
    inline,
    color,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$n);
  const classes = mapToCssModules((0, import_classnames.default)(className, !inline ? "form-text" : false, color ? `text-${color}` : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
FormText.propTypes = propTypes$q;
FormText.defaultProps = defaultProps$p;
var _excluded$m = ["className", "cssModule", "type", "bsSize", "valid", "invalid", "tag", "addon", "plaintext", "innerRef"];
var propTypes$p = {
  children: import_prop_types7.default.node,
  type: import_prop_types7.default.string,
  size: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
  bsSize: import_prop_types7.default.string,
  valid: import_prop_types7.default.bool,
  invalid: import_prop_types7.default.bool,
  tag: tagPropType,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  plaintext: import_prop_types7.default.bool,
  addon: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$o = {
  type: "text"
};
var Input = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this.getRef = this.getRef.bind(this);
    this.focus = this.focus.bind(this);
  }
  getRef(ref) {
    if (this.props.innerRef) {
      this.props.innerRef(ref);
    }
    this.ref = ref;
  }
  focus() {
    if (this.ref) {
      this.ref.focus();
    }
  }
  render() {
    let _this$props = this.props, {
      className,
      cssModule,
      type,
      bsSize,
      valid,
      invalid,
      tag,
      addon,
      plaintext,
      innerRef
    } = _this$props, attributes = _objectWithoutProperties(_this$props, _excluded$m);
    const checkInput = ["switch", "radio", "checkbox"].indexOf(type) > -1;
    const isNotaNumber = /\D/g;
    const textareaInput = type === "textarea";
    const selectInput = type === "select";
    const rangeInput = type === "range";
    let Tag = tag || (selectInput || textareaInput ? type : "input");
    let formControlClass = "form-control";
    if (plaintext) {
      formControlClass = `${formControlClass}-plaintext`;
      Tag = tag || "input";
    } else if (rangeInput) {
      formControlClass = "form-range";
    } else if (selectInput) {
      formControlClass = "form-select";
    } else if (checkInput) {
      if (addon) {
        formControlClass = null;
      } else {
        formControlClass = "form-check-input";
      }
    }
    if (attributes.size && isNotaNumber.test(attributes.size)) {
      warnOnce(`Please use the prop "bsSize" instead of the "size" to bootstrap's input sizing.`);
      bsSize = attributes.size;
      delete attributes.size;
    }
    const classes = mapToCssModules((0, import_classnames.default)(className, invalid && "is-invalid", valid && "is-valid", bsSize ? selectInput ? `form-select-${bsSize}` : `form-control-${bsSize}` : false, formControlClass), cssModule);
    if (Tag === "input" || tag && typeof tag === "function") {
      attributes.type = type === "switch" ? "checkbox" : type;
    }
    if (attributes.children && !(plaintext || type === "select" || typeof Tag !== "string" || Tag === "select")) {
      warnOnce(`Input with a type of "${type}" cannot have children. Please use "value"/"defaultValue" instead.`);
      delete attributes.children;
    }
    return import_react8.default.createElement(Tag, _extends2({}, attributes, {
      ref: innerRef,
      className: classes,
      "aria-invalid": invalid
    }));
  }
};
Input.propTypes = propTypes$p;
Input.defaultProps = defaultProps$o;
var Input$1 = Input;
var _excluded$l = ["className", "cssModule", "tag", "type", "size"];
var propTypes$o = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  size: import_prop_types7.default.string,
  tag: tagPropType,
  type: import_prop_types7.default.string
};
var defaultProps$n = {
  tag: "div"
};
function InputGroup(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    type,
    size
  } = props, attributes = _objectWithoutProperties(props, _excluded$l);
  const classes = mapToCssModules((0, import_classnames.default)(className, "input-group", size ? `input-group-${size}` : null), cssModule);
  if (props.type === "dropdown") {
    return import_react8.default.createElement(Dropdown$1, _extends2({}, attributes, {
      className: classes
    }));
  }
  return import_react8.default.createElement(InputGroupContext.Provider, {
    value: {
      insideInputGroup: true
    }
  }, import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  })));
}
InputGroup.propTypes = propTypes$o;
InputGroup.defaultProps = defaultProps$n;
var _excluded$k = ["className", "cssModule", "tag"];
var propTypes$n = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$m = {
  tag: "span"
};
function InputGroupText(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$k);
  const classes = mapToCssModules((0, import_classnames.default)(className, "input-group-text"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
InputGroupText.propTypes = propTypes$n;
InputGroupText.defaultProps = defaultProps$m;
var _excluded$j = ["className", "cssModule", "hidden", "widths", "tag", "check", "size", "for"];
var colWidths = ["xs", "sm", "md", "lg", "xl", "xxl"];
var stringOrNumberProp = import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]);
var columnProps = import_prop_types7.default.oneOfType([import_prop_types7.default.bool, import_prop_types7.default.string, import_prop_types7.default.number, import_prop_types7.default.shape({
  size: stringOrNumberProp,
  order: stringOrNumberProp,
  offset: stringOrNumberProp
})]);
var propTypes$m = {
  children: import_prop_types7.default.node,
  hidden: import_prop_types7.default.bool,
  check: import_prop_types7.default.bool,
  size: import_prop_types7.default.string,
  for: import_prop_types7.default.string,
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  xs: columnProps,
  sm: columnProps,
  md: columnProps,
  lg: columnProps,
  xl: columnProps,
  xxl: columnProps,
  widths: import_prop_types7.default.array
};
var defaultProps$l = {
  tag: "label",
  widths: colWidths
};
var getColumnSizeClass = (isXs, colWidth, colSize) => {
  if (colSize === true || colSize === "") {
    return isXs ? "col" : `col-${colWidth}`;
  }
  if (colSize === "auto") {
    return isXs ? "col-auto" : `col-${colWidth}-auto`;
  }
  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
};
function Label(props) {
  const {
    className,
    cssModule,
    hidden,
    widths,
    tag: Tag,
    check,
    size,
    for: htmlFor
  } = props, attributes = _objectWithoutProperties(props, _excluded$j);
  const colClasses = [];
  widths.forEach((colWidth, i) => {
    let columnProp = props[colWidth];
    delete attributes[colWidth];
    if (!columnProp && columnProp !== "") {
      return;
    }
    const isXs = !i;
    let colClass;
    if (isObject(columnProp)) {
      const colSizeInterfix = isXs ? "-" : `-${colWidth}-`;
      colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
      colClasses.push(mapToCssModules((0, import_classnames.default)({
        [colClass]: columnProp.size || columnProp.size === "",
        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,
        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0
      })), cssModule);
    } else {
      colClass = getColumnSizeClass(isXs, colWidth, columnProp);
      colClasses.push(colClass);
    }
  });
  const colFormLabel = size || colClasses.length;
  const formLabel = !(check || colFormLabel);
  const classes = mapToCssModules((0, import_classnames.default)(className, hidden ? "visually-hidden" : false, check ? "form-check-label" : false, size ? `col-form-label-${size}` : false, colClasses, colFormLabel ? "col-form-label" : false, formLabel ? "form-label" : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({
    htmlFor
  }, attributes, {
    className: classes
  }));
}
Label.propTypes = propTypes$m;
Label.defaultProps = defaultProps$l;
var _excluded$i = ["body", "bottom", "className", "cssModule", "heading", "left", "list", "middle", "object", "right", "tag", "top"];
var propTypes$l = {
  body: import_prop_types7.default.bool,
  bottom: import_prop_types7.default.bool,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  heading: import_prop_types7.default.bool,
  left: import_prop_types7.default.bool,
  list: import_prop_types7.default.bool,
  middle: import_prop_types7.default.bool,
  object: import_prop_types7.default.bool,
  right: import_prop_types7.default.bool,
  tag: tagPropType,
  top: import_prop_types7.default.bool
};
function Media(props) {
  const {
    body,
    bottom,
    className,
    cssModule,
    heading,
    left,
    list,
    middle,
    object,
    right,
    tag,
    top
  } = props, attributes = _objectWithoutProperties(props, _excluded$i);
  let defaultTag;
  if (heading) {
    defaultTag = "h4";
  } else if (attributes.href) {
    defaultTag = "a";
  } else if (attributes.src || object) {
    defaultTag = "img";
  } else if (list) {
    defaultTag = "ul";
  } else {
    defaultTag = "div";
  }
  const Tag = tag || defaultTag;
  const classes = mapToCssModules((0, import_classnames.default)(className, {
    "media-body": body,
    "media-heading": heading,
    "media-left": left,
    "media-right": right,
    "media-top": top,
    "media-bottom": bottom,
    "media-middle": middle,
    "media-object": object,
    "media-list": list,
    media: !body && !heading && !left && !right && !top && !bottom && !middle && !object && !list
  }), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
Media.propTypes = propTypes$l;
function noop2() {
}
var FadePropTypes = import_prop_types7.default.shape(Fade.propTypes);
var propTypes$k = {
  autoFocus: import_prop_types7.default.bool,
  backdrop: import_prop_types7.default.bool,
  backdropClassName: import_prop_types7.default.string,
  backdropTransition: FadePropTypes,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  container: targetPropType,
  cssModule: import_prop_types7.default.object,
  direction: import_prop_types7.default.oneOf(["start", "end", "bottom", "top"]),
  fade: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  isOpen: import_prop_types7.default.bool,
  keyboard: import_prop_types7.default.bool,
  labelledBy: import_prop_types7.default.string,
  offcanvasTransition: FadePropTypes,
  onClosed: import_prop_types7.default.func,
  onEnter: import_prop_types7.default.func,
  onExit: import_prop_types7.default.func,
  style: import_prop_types7.default.object,
  onOpened: import_prop_types7.default.func,
  returnFocusAfterClose: import_prop_types7.default.bool,
  role: import_prop_types7.default.string,
  scrollable: import_prop_types7.default.bool,
  toggle: import_prop_types7.default.func,
  trapFocus: import_prop_types7.default.bool,
  unmountOnClose: import_prop_types7.default.bool,
  zIndex: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string])
};
var propsToOmit = Object.keys(propTypes$k);
var defaultProps$k = {
  isOpen: false,
  autoFocus: true,
  direction: "start",
  scrollable: false,
  role: "dialog",
  backdrop: true,
  keyboard: true,
  zIndex: 1050,
  fade: true,
  onOpened: noop2,
  onClosed: noop2,
  offcanvasTransition: {
    timeout: TransitionTimeouts.Offcanvas
  },
  backdropTransition: {
    mountOnEnter: true,
    timeout: TransitionTimeouts.Fade
  },
  unmountOnClose: true,
  returnFocusAfterClose: true,
  container: "body",
  trapFocus: false
};
var Offcanvas = class extends import_react8.default.Component {
  constructor(props) {
    super(props);
    this._element = null;
    this._originalBodyPadding = null;
    this.getFocusableChildren = this.getFocusableChildren.bind(this);
    this.handleBackdropClick = this.handleBackdropClick.bind(this);
    this.handleBackdropMouseDown = this.handleBackdropMouseDown.bind(this);
    this.handleEscape = this.handleEscape.bind(this);
    this.handleTab = this.handleTab.bind(this);
    this.onOpened = this.onOpened.bind(this);
    this.onClosed = this.onClosed.bind(this);
    this.manageFocusAfterClose = this.manageFocusAfterClose.bind(this);
    this.clearBackdropAnimationTimeout = this.clearBackdropAnimationTimeout.bind(this);
    this.trapFocus = this.trapFocus.bind(this);
    this.state = {
      isOpen: false
    };
  }
  componentDidMount() {
    const {
      isOpen,
      autoFocus,
      onEnter
    } = this.props;
    if (isOpen) {
      this.init();
      this.setState({
        isOpen: true
      });
      if (autoFocus) {
        this.setFocus();
      }
    }
    if (onEnter) {
      onEnter();
    }
    document.addEventListener("focus", this.trapFocus, true);
    this._isMounted = true;
  }
  componentDidUpdate(prevProps, prevState) {
    if (this.props.isOpen && !prevProps.isOpen) {
      this.init();
      this.setState({
        isOpen: true
      });
      return;
    }
    if (this.props.autoFocus && this.state.isOpen && !prevState.isOpen) {
      this.setFocus();
    }
    if (this._element && prevProps.zIndex !== this.props.zIndex) {
      this._element.style.zIndex = this.props.zIndex;
    }
  }
  componentWillUnmount() {
    this.clearBackdropAnimationTimeout();
    if (this.props.onExit) {
      this.props.onExit();
    }
    if (this._element) {
      this.destroy();
      if (this.props.isOpen || this.state.isOpen) {
        this.close();
      }
    }
    document.removeEventListener("focus", this.trapFocus, true);
    this._isMounted = false;
  }
  handleBackdropClick(e) {
    if (e.target === this._mouseDownElement) {
      e.stopPropagation();
      const backdrop = this._backdrop;
      if (!this.props.isOpen || this.props.backdrop !== true)
        return;
      if (backdrop && e.target === backdrop && this.props.toggle) {
        this.props.toggle(e);
      }
    }
  }
  handleTab(e) {
    if (e.which !== 9)
      return;
    if (this.offcanvasIndex < Offcanvas.openCount - 1)
      return;
    const focusableChildren = this.getFocusableChildren();
    const totalFocusable = focusableChildren.length;
    if (totalFocusable === 0)
      return;
    const currentFocus = this.getFocusedChild();
    let focusedIndex = 0;
    for (let i = 0; i < totalFocusable; i += 1) {
      if (focusableChildren[i] === currentFocus) {
        focusedIndex = i;
        break;
      }
    }
    if (e.shiftKey && focusedIndex === 0) {
      e.preventDefault();
      focusableChildren[totalFocusable - 1].focus();
    } else if (!e.shiftKey && focusedIndex === totalFocusable - 1) {
      e.preventDefault();
      focusableChildren[0].focus();
    }
  }
  handleBackdropMouseDown(e) {
    this._mouseDownElement = e.target;
  }
  handleEscape(e) {
    if (this.props.isOpen && e.keyCode === keyCodes.esc && this.props.toggle) {
      if (this.props.keyboard) {
        e.preventDefault();
        e.stopPropagation();
        this.props.toggle(e);
      }
    }
  }
  onOpened(node, isAppearing) {
    this.props.onOpened();
    (this.props.offcanvasTransition.onEntered || noop2)(node, isAppearing);
  }
  onClosed(node) {
    const {
      unmountOnClose
    } = this.props;
    this.props.onClosed();
    (this.props.offcanvasTransition.onExited || noop2)(node);
    if (unmountOnClose) {
      this.destroy();
    }
    this.close();
    if (this._isMounted) {
      this.setState({
        isOpen: false
      });
    }
  }
  setFocus() {
    if (this._dialog && typeof this._dialog.focus === "function") {
      this._dialog.focus();
    }
  }
  getFocusableChildren() {
    return this._element.querySelectorAll(focusableElements.join(", "));
  }
  getFocusedChild() {
    let currentFocus;
    const focusableChildren = this.getFocusableChildren();
    try {
      currentFocus = document.activeElement;
    } catch (err) {
      currentFocus = focusableChildren[0];
    }
    return currentFocus;
  }
  trapFocus(ev) {
    if (!this.props.trapFocus) {
      return;
    }
    if (!this._element) {
      return;
    }
    if (this._dialog === ev.target) {
      return;
    }
    if (this.offcanvasIndex < Offcanvas.openCount - 1) {
      return;
    }
    const children2 = this.getFocusableChildren();
    for (let i = 0; i < children2.length; i += 1) {
      if (children2[i] === ev.target)
        return;
    }
    if (children2.length > 0) {
      ev.preventDefault();
      ev.stopPropagation();
      children2[0].focus();
    }
  }
  init() {
    try {
      this._triggeringElement = document.activeElement;
    } catch (err) {
      this._triggeringElement = null;
    }
    if (!this._element) {
      this._element = document.createElement("div");
      this._element.setAttribute("tabindex", "-1");
      this._element.style.position = "relative";
      this._element.style.zIndex = this.props.zIndex;
      this._mountContainer = getTarget(this.props.container);
      this._mountContainer.appendChild(this._element);
    }
    this._originalBodyPadding = getOriginalBodyPadding();
    conditionallyUpdateScrollbar();
    if (Offcanvas.openCount === 0 && this.props.backdrop && !this.props.scrollable) {
      document.body.style.overflow = "hidden";
    }
    this.offcanvasIndex = Offcanvas.openCount;
    Offcanvas.openCount += 1;
  }
  destroy() {
    if (this._element) {
      this._mountContainer.removeChild(this._element);
      this._element = null;
    }
    this.manageFocusAfterClose();
  }
  manageFocusAfterClose() {
    if (this._triggeringElement) {
      const {
        returnFocusAfterClose
      } = this.props;
      if (this._triggeringElement.focus && returnFocusAfterClose)
        this._triggeringElement.focus();
      this._triggeringElement = null;
    }
  }
  close() {
    this.manageFocusAfterClose();
    Offcanvas.openCount = Math.max(0, Offcanvas.openCount - 1);
    document.body.style.overflow = null;
    setScrollbarWidth(this._originalBodyPadding);
  }
  clearBackdropAnimationTimeout() {
    if (this._backdropAnimationTimeout) {
      clearTimeout(this._backdropAnimationTimeout);
      this._backdropAnimationTimeout = void 0;
    }
  }
  render() {
    const {
      direction,
      unmountOnClose
    } = this.props;
    if (!!this._element && (this.state.isOpen || !unmountOnClose)) {
      const isOffcanvasHidden = !!this._element && !this.state.isOpen && !unmountOnClose;
      this._element.style.display = isOffcanvasHidden ? "none" : "block";
      const {
        className,
        backdropClassName,
        cssModule,
        isOpen,
        backdrop,
        role,
        labelledBy,
        style
      } = this.props;
      const offcanvasAttributes = {
        onKeyUp: this.handleEscape,
        onKeyDown: this.handleTab,
        "aria-labelledby": labelledBy,
        role,
        tabIndex: "-1"
      };
      const hasTransition = this.props.fade;
      const offcanvasTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), this.props.offcanvasTransition), {}, {
        baseClass: hasTransition ? this.props.offcanvasTransition.baseClass : "",
        timeout: hasTransition ? this.props.offcanvasTransition.timeout : 0
      });
      const backdropTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), this.props.backdropTransition), {}, {
        baseClass: hasTransition ? this.props.backdropTransition.baseClass : "",
        timeout: hasTransition ? this.props.backdropTransition.timeout : 0
      });
      const Backdrop = backdrop && (hasTransition ? import_react8.default.createElement(Fade, _extends2({}, backdropTransition, {
        in: isOpen && !!backdrop,
        innerRef: (c) => {
          this._backdrop = c;
        },
        cssModule,
        className: mapToCssModules((0, import_classnames.default)("offcanvas-backdrop", backdropClassName), cssModule),
        onClick: this.handleBackdropClick,
        onMouseDown: this.handleBackdropMouseDown
      })) : import_react8.default.createElement("div", {
        className: mapToCssModules((0, import_classnames.default)("offcanvas-backdrop", "show", backdropClassName), cssModule),
        onClick: this.handleBackdropClick,
        onMouseDown: this.handleBackdropMouseDown
      }));
      const attributes = omit(this.props, propsToOmit);
      return import_react8.default.createElement(Portal$1, {
        node: this._element
      }, import_react8.default.createElement(Fade, _extends2({}, attributes, offcanvasAttributes, offcanvasTransition, {
        in: isOpen,
        onEntered: this.onOpened,
        onExited: this.onClosed,
        cssModule,
        className: mapToCssModules((0, import_classnames.default)("offcanvas", className, `offcanvas-${direction}`), cssModule),
        innerRef: (c) => {
          this._dialog = c;
        },
        style: _objectSpread2(_objectSpread2({}, style), {}, {
          visibility: isOpen ? "visible" : "hidden"
        })
      }), this.props.children), Backdrop);
    }
    return null;
  }
};
Offcanvas.propTypes = propTypes$k;
Offcanvas.defaultProps = defaultProps$k;
Offcanvas.openCount = 0;
var Offcanvas$1 = Offcanvas;
var _excluded$h = ["className", "cssModule", "tag"];
var propTypes$j = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$j = {
  tag: "div"
};
function OffcanvasBody(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$h);
  const classes = mapToCssModules((0, import_classnames.default)(className, "offcanvas-body"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
OffcanvasBody.propTypes = propTypes$j;
OffcanvasBody.defaultProps = defaultProps$j;
var _excluded$g = ["children", "className", "close", "closeAriaLabel", "cssModule", "tag", "toggle", "wrapTag"];
var propTypes$i = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  close: import_prop_types7.default.object,
  closeAriaLabel: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  toggle: import_prop_types7.default.func,
  wrapTag: tagPropType
};
var defaultProps$i = {
  closeAriaLabel: "Close",
  tag: "h5",
  wrapTag: "div"
};
function OffcanvasHeader(props) {
  let closeButton;
  const {
    children: children2,
    className,
    close,
    closeAriaLabel,
    cssModule,
    tag: Tag,
    toggle,
    wrapTag: WrapTag
  } = props, attributes = _objectWithoutProperties(props, _excluded$g);
  const classes = mapToCssModules((0, import_classnames.default)(className, "offcanvas-header"), cssModule);
  if (!close && toggle) {
    closeButton = import_react8.default.createElement("button", {
      type: "button",
      onClick: toggle,
      className: mapToCssModules("btn-close", cssModule),
      "aria-label": closeAriaLabel
    });
  }
  return import_react8.default.createElement(WrapTag, _extends2({}, attributes, {
    className: classes
  }), import_react8.default.createElement(Tag, {
    className: mapToCssModules("offcanvas-title", cssModule)
  }, children2), close || closeButton);
}
OffcanvasHeader.propTypes = propTypes$i;
OffcanvasHeader.defaultProps = defaultProps$i;
var _excluded$f = ["className", "listClassName", "cssModule", "size", "tag", "listTag", "aria-label"];
var propTypes$h = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  listClassName: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  size: import_prop_types7.default.string,
  tag: tagPropType,
  listTag: tagPropType,
  "aria-label": import_prop_types7.default.string
};
var defaultProps$h = {
  tag: "nav",
  listTag: "ul",
  "aria-label": "pagination"
};
function Pagination(props) {
  const {
    className,
    listClassName,
    cssModule,
    size,
    tag: Tag,
    listTag: ListTag,
    "aria-label": label
  } = props, attributes = _objectWithoutProperties(props, _excluded$f);
  const classes = mapToCssModules((0, import_classnames.default)(className), cssModule);
  const listClasses = mapToCssModules((0, import_classnames.default)(listClassName, "pagination", {
    [`pagination-${size}`]: !!size
  }), cssModule);
  return import_react8.default.createElement(Tag, {
    className: classes,
    "aria-label": label
  }, import_react8.default.createElement(ListTag, _extends2({}, attributes, {
    className: listClasses
  })));
}
Pagination.propTypes = propTypes$h;
Pagination.defaultProps = defaultProps$h;
var _excluded$e = ["active", "className", "cssModule", "disabled", "tag"];
var propTypes$g = {
  active: import_prop_types7.default.bool,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  disabled: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$g = {
  tag: "li"
};
function PaginationItem(props) {
  const {
    active,
    className,
    cssModule,
    disabled,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$e);
  const classes = mapToCssModules((0, import_classnames.default)(className, "page-item", {
    active,
    disabled
  }), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
PaginationItem.propTypes = propTypes$g;
PaginationItem.defaultProps = defaultProps$g;
var _excluded$d = ["className", "cssModule", "next", "previous", "first", "last", "tag"];
var propTypes$f = {
  "aria-label": import_prop_types7.default.string,
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  next: import_prop_types7.default.bool,
  previous: import_prop_types7.default.bool,
  first: import_prop_types7.default.bool,
  last: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$f = {
  tag: "a"
};
function PaginationLink(props) {
  let {
    className,
    cssModule,
    next,
    previous,
    first,
    last,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$d);
  const classes = mapToCssModules((0, import_classnames.default)(className, "page-link"), cssModule);
  let defaultAriaLabel;
  if (previous) {
    defaultAriaLabel = "Previous";
  } else if (next) {
    defaultAriaLabel = "Next";
  } else if (first) {
    defaultAriaLabel = "First";
  } else if (last) {
    defaultAriaLabel = "Last";
  }
  const ariaLabel = props["aria-label"] || defaultAriaLabel;
  let defaultCaret;
  if (previous) {
    defaultCaret = "\u2039";
  } else if (next) {
    defaultCaret = "\u203A";
  } else if (first) {
    defaultCaret = "\xAB";
  } else if (last) {
    defaultCaret = "\xBB";
  }
  let {
    children: children2
  } = props;
  if (children2 && Array.isArray(children2) && children2.length === 0) {
    children2 = null;
  }
  if (!attributes.href && Tag === "a") {
    Tag = "button";
  }
  if (previous || next || first || last) {
    children2 = [import_react8.default.createElement("span", {
      "aria-hidden": "true",
      key: "caret"
    }, children2 || defaultCaret), import_react8.default.createElement("span", {
      className: "visually-hidden",
      key: "ariaLabel"
    }, ariaLabel)];
  }
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    "aria-label": ariaLabel
  }), children2);
}
PaginationLink.propTypes = propTypes$f;
PaginationLink.defaultProps = defaultProps$f;
var TabContext = import_react8.default.createContext({});
var propTypes$e = {
  tag: tagPropType,
  activeTab: import_prop_types7.default.any,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object
};
var defaultProps$e = {
  tag: "div"
};
var TabContent = class extends import_react8.Component {
  static getDerivedStateFromProps(nextProps, prevState) {
    if (prevState.activeTab !== nextProps.activeTab) {
      return {
        activeTab: nextProps.activeTab
      };
    }
    return null;
  }
  constructor(props) {
    super(props);
    this.state = {
      activeTab: this.props.activeTab
    };
  }
  render() {
    const {
      className,
      cssModule,
      tag: Tag
    } = this.props;
    const attributes = omit(this.props, Object.keys(propTypes$e));
    const classes = mapToCssModules((0, import_classnames.default)("tab-content", className), cssModule);
    return import_react8.default.createElement(TabContext.Provider, {
      value: {
        activeTabId: this.state.activeTab
      }
    }, import_react8.default.createElement(Tag, _extends2({}, attributes, {
      className: classes
    })));
  }
};
var TabContent$1 = TabContent;
TabContent.propTypes = propTypes$e;
TabContent.defaultProps = defaultProps$e;
var _excluded$c = ["className", "cssModule", "tabId", "tag"];
var propTypes$d = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tabId: import_prop_types7.default.any
};
var defaultProps$d = {
  tag: "div"
};
function TabPane(props) {
  const {
    className,
    cssModule,
    tabId,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$c);
  const getClasses = (activeTabId) => mapToCssModules((0, import_classnames.default)("tab-pane", className, {
    active: tabId === activeTabId
  }), cssModule);
  return import_react8.default.createElement(TabContext.Consumer, null, ({
    activeTabId
  }) => import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: getClasses(activeTabId)
  })));
}
TabPane.propTypes = propTypes$d;
TabPane.defaultProps = defaultProps$d;
var _excluded$b = ["className", "closeClassName", "closeAriaLabel", "cssModule", "tag", "color", "isOpen", "toggle", "children", "transition", "fade", "innerRef"];
var propTypes$c = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  closeClassName: import_prop_types7.default.string,
  closeAriaLabel: import_prop_types7.default.string,
  color: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  fade: import_prop_types7.default.bool,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func]),
  isOpen: import_prop_types7.default.bool,
  tag: tagPropType,
  toggle: import_prop_types7.default.func,
  transition: import_prop_types7.default.shape(Fade.propTypes)
};
var defaultProps$c = {
  color: "success",
  isOpen: true,
  tag: "div",
  closeAriaLabel: "Close",
  fade: true,
  transition: _objectSpread2(_objectSpread2({}, Fade.defaultProps), {}, {
    unmountOnExit: true
  })
};
function Alert(props) {
  const {
    className,
    closeClassName,
    closeAriaLabel,
    cssModule,
    tag: Tag,
    color,
    isOpen,
    toggle,
    children: children2,
    transition,
    fade,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$b);
  const classes = mapToCssModules((0, import_classnames.default)(className, "alert", `alert-${color}`, {
    "alert-dismissible": toggle
  }), cssModule);
  const closeClasses = mapToCssModules((0, import_classnames.default)("btn-close", closeClassName), cssModule);
  const alertTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), transition), {}, {
    baseClass: fade ? transition.baseClass : "",
    timeout: fade ? transition.timeout : 0
  });
  return import_react8.default.createElement(Fade, _extends2({}, attributes, alertTransition, {
    tag: Tag,
    className: classes,
    in: isOpen,
    role: "alert",
    innerRef
  }), toggle ? import_react8.default.createElement("button", {
    type: "button",
    className: closeClasses,
    "aria-label": closeAriaLabel,
    onClick: toggle
  }) : null, children2);
}
Alert.propTypes = propTypes$c;
Alert.defaultProps = defaultProps$c;
var _excluded$a = ["className", "cssModule", "tag", "isOpen", "children", "transition", "fade", "innerRef"];
var propTypes$b = {
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  fade: import_prop_types7.default.bool,
  isOpen: import_prop_types7.default.bool,
  tag: tagPropType,
  transition: import_prop_types7.default.shape(Fade.propTypes),
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func])
};
var defaultProps$b = {
  isOpen: true,
  tag: "div",
  fade: true,
  transition: _objectSpread2(_objectSpread2({}, Fade.defaultProps), {}, {
    unmountOnExit: true
  })
};
function Toast(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    isOpen,
    children: children2,
    transition,
    fade,
    innerRef
  } = props, attributes = _objectWithoutProperties(props, _excluded$a);
  const classes = mapToCssModules((0, import_classnames.default)(className, "toast"), cssModule);
  const toastTransition = _objectSpread2(_objectSpread2(_objectSpread2({}, Fade.defaultProps), transition), {}, {
    baseClass: fade ? transition.baseClass : "",
    timeout: fade ? transition.timeout : 0
  });
  return import_react8.default.createElement(Fade, _extends2({}, attributes, toastTransition, {
    tag: Tag,
    className: classes,
    in: isOpen,
    role: "alert",
    innerRef
  }), children2);
}
Toast.propTypes = propTypes$b;
Toast.defaultProps = defaultProps$b;
var _excluded$9 = ["className", "cssModule", "innerRef", "tag"];
var propTypes$a = {
  tag: tagPropType,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.string, import_prop_types7.default.func])
};
var defaultProps$a = {
  tag: "div"
};
function ToastBody(props) {
  const {
    className,
    cssModule,
    innerRef,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$9);
  const classes = mapToCssModules((0, import_classnames.default)(className, "toast-body"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref: innerRef
  }));
}
ToastBody.propTypes = propTypes$a;
ToastBody.defaultProps = defaultProps$a;
var _excluded$8 = ["className", "cssModule", "children", "toggle", "tag", "wrapTag", "closeAriaLabel", "close", "tagClassName", "icon"];
var propTypes$9 = {
  tag: tagPropType,
  icon: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.node]),
  wrapTag: tagPropType,
  toggle: import_prop_types7.default.func,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  children: import_prop_types7.default.node,
  closeAriaLabel: import_prop_types7.default.string,
  charCode: import_prop_types7.default.oneOfType([import_prop_types7.default.string, import_prop_types7.default.number]),
  close: import_prop_types7.default.object,
  tagClassName: import_prop_types7.default.string
};
var defaultProps$9 = {
  tag: "strong",
  wrapTag: "div",
  tagClassName: "me-auto",
  closeAriaLabel: "Close"
};
function ToastHeader(props) {
  let closeButton;
  let icon;
  const {
    className,
    cssModule,
    children: children2,
    toggle,
    tag: Tag,
    wrapTag: WrapTag,
    closeAriaLabel,
    close,
    tagClassName,
    icon: iconProp
  } = props, attributes = _objectWithoutProperties(props, _excluded$8);
  const classes = mapToCssModules((0, import_classnames.default)(className, "toast-header"), cssModule);
  if (!close && toggle) {
    closeButton = import_react8.default.createElement("button", {
      type: "button",
      onClick: toggle,
      className: mapToCssModules("btn-close", cssModule),
      "aria-label": closeAriaLabel
    });
  }
  if (typeof iconProp === "string") {
    icon = import_react8.default.createElement("svg", {
      className: mapToCssModules(`rounded text-${iconProp}`),
      width: "20",
      height: "20",
      xmlns: "http://www.w3.org/2000/svg",
      preserveAspectRatio: "xMidYMid slice",
      focusable: "false",
      role: "img"
    }, import_react8.default.createElement("rect", {
      fill: "currentColor",
      width: "100%",
      height: "100%"
    }));
  } else if (iconProp) {
    icon = iconProp;
  }
  return import_react8.default.createElement(WrapTag, _extends2({}, attributes, {
    className: classes
  }), icon, import_react8.default.createElement(Tag, {
    className: mapToCssModules((0, import_classnames.default)(tagClassName, {
      "ms-2": icon != null
    }), cssModule)
  }, children2), close || closeButton);
}
ToastHeader.propTypes = propTypes$9;
ToastHeader.defaultProps = defaultProps$9;
var _excluded$7 = ["className", "cssModule", "tag", "active", "disabled", "action", "color"];
var propTypes$8 = {
  action: import_prop_types7.default.bool,
  active: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  color: import_prop_types7.default.string,
  disabled: import_prop_types7.default.bool,
  tag: tagPropType
};
var defaultProps$8 = {
  tag: "li"
};
var handleDisabledOnClick = (e) => {
  e.preventDefault();
};
function ListGroupItem(props) {
  const {
    className,
    cssModule,
    tag: Tag,
    active,
    disabled,
    action,
    color
  } = props, attributes = _objectWithoutProperties(props, _excluded$7);
  const classes = mapToCssModules((0, import_classnames.default)(className, active ? "active" : false, disabled ? "disabled" : false, action ? "list-group-item-action" : false, color ? `list-group-item-${color}` : false, "list-group-item"), cssModule);
  if (disabled) {
    attributes.onClick = handleDisabledOnClick;
  }
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ListGroupItem.propTypes = propTypes$8;
ListGroupItem.defaultProps = defaultProps$8;
var _excluded$6 = ["className", "cssModule", "tag"];
var propTypes$7 = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$7 = {
  tag: "h5"
};
function ListGroupItemHeading(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$6);
  const classes = mapToCssModules((0, import_classnames.default)(className, "list-group-item-heading"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ListGroupItemHeading.propTypes = propTypes$7;
ListGroupItemHeading.defaultProps = defaultProps$7;
var _excluded$5 = ["className", "cssModule", "tag"];
var propTypes$6 = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$6 = {
  tag: "p"
};
function ListGroupItemText(props) {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$5);
  const classes = mapToCssModules((0, import_classnames.default)(className, "list-group-item-text"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes
  }));
}
ListGroupItemText.propTypes = propTypes$6;
ListGroupItemText.defaultProps = defaultProps$6;
var _excluded$4 = ["className", "cssModule", "tag", "type"];
var propTypes$5 = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType,
  type: import_prop_types7.default.string
};
var defaultProps$5 = {
  tag: "ul"
};
var List = (0, import_react8.forwardRef)((props, ref) => {
  const {
    className,
    cssModule,
    tag: Tag,
    type
  } = props, attributes = _objectWithoutProperties(props, _excluded$4);
  const classes = mapToCssModules((0, import_classnames.default)(className, type ? `list-${type}` : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref
  }));
});
List.name = "List";
List.propTypes = propTypes$5;
List.defaultProps = defaultProps$5;
var List$1 = List;
var _excluded$3 = ["className", "cssModule", "tag"];
var propTypes$4 = {
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  tag: tagPropType
};
var defaultProps$4 = {
  tag: "li"
};
var ListInlineItem = (0, import_react8.forwardRef)((props, ref) => {
  const {
    className,
    cssModule,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$3);
  const classes = mapToCssModules((0, import_classnames.default)(className, "list-inline-item"), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, attributes, {
    className: classes,
    ref
  }));
});
ListInlineItem.name = "ListInlineItem";
ListInlineItem.propTypes = propTypes$4;
ListInlineItem.defaultProps = defaultProps$4;
var ListInlineItem$1 = ListInlineItem;
var UncontrolledAlert = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: true
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState((prevState) => ({
      isOpen: !prevState.isOpen
    }));
  }
  render() {
    return import_react8.default.createElement(Alert, _extends2({
      isOpen: this.state.isOpen,
      toggle: this.toggle
    }, this.props));
  }
};
var UncontrolledAlert$1 = UncontrolledAlert;
var omitKeys$3 = ["defaultOpen"];
var UncontrolledButtonDropdown = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: props.defaultOpen || false
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState((prevState) => ({
      isOpen: !prevState.isOpen
    }));
  }
  render() {
    return import_react8.default.createElement(ButtonDropdown, _extends2({
      isOpen: this.state.isOpen,
      toggle: this.toggle
    }, omit(this.props, omitKeys$3)));
  }
};
UncontrolledButtonDropdown.propTypes = _objectSpread2({
  defaultOpen: import_prop_types7.default.bool
}, ButtonDropdown.propTypes);
var omitKeys$2 = ["toggleEvents", "defaultOpen"];
var propTypes$3 = {
  defaultOpen: import_prop_types7.default.bool,
  toggler: import_prop_types7.default.string.isRequired,
  toggleEvents: import_prop_types7.default.arrayOf(import_prop_types7.default.string)
};
var defaultProps$3 = {
  toggleEvents: defaultToggleEvents
};
var UncontrolledCollapse = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.togglers = null;
    this.removeEventListeners = null;
    this.toggle = this.toggle.bind(this);
    this.state = {
      isOpen: props.defaultOpen || false
    };
  }
  componentDidMount() {
    this.togglers = findDOMElements(this.props.toggler);
    if (this.togglers.length) {
      this.removeEventListeners = addMultipleEventListeners(this.togglers, this.toggle, this.props.toggleEvents);
    }
  }
  componentWillUnmount() {
    if (this.togglers.length && this.removeEventListeners) {
      this.removeEventListeners();
    }
  }
  toggle(e) {
    this.setState(({
      isOpen
    }) => ({
      isOpen: !isOpen
    }));
    e.preventDefault();
  }
  render() {
    return import_react8.default.createElement(Collapse$1, _extends2({
      isOpen: this.state.isOpen
    }, omit(this.props, omitKeys$2)));
  }
};
UncontrolledCollapse.propTypes = propTypes$3;
UncontrolledCollapse.defaultProps = defaultProps$3;
var UncontrolledCollapse$1 = UncontrolledCollapse;
var omitKeys$1 = ["defaultOpen"];
var UncontrolledDropdown = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: props.defaultOpen || false
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle(e) {
    this.setState((prevState) => ({
      isOpen: !prevState.isOpen
    }), () => {
      if (this.props.onToggle) {
        this.props.onToggle(e, this.state.isOpen);
      }
    });
  }
  render() {
    return import_react8.default.createElement(Dropdown$1, _extends2({
      isOpen: this.state.isOpen,
      toggle: this.toggle
    }, omit(this.props, omitKeys$1)));
  }
};
UncontrolledDropdown.propTypes = _objectSpread2({
  defaultOpen: import_prop_types7.default.bool,
  onToggle: import_prop_types7.default.func
}, Dropdown$1.propTypes);
var omitKeys = ["defaultOpen"];
var UncontrolledTooltip = class extends import_react8.Component {
  constructor(props) {
    super(props);
    this.state = {
      isOpen: props.defaultOpen || false
    };
    this.toggle = this.toggle.bind(this);
  }
  toggle() {
    this.setState((prevState) => ({
      isOpen: !prevState.isOpen
    }));
  }
  render() {
    return import_react8.default.createElement(Tooltip, _extends2({
      isOpen: this.state.isOpen,
      toggle: this.toggle
    }, omit(this.props, omitKeys)));
  }
};
UncontrolledTooltip.propTypes = _objectSpread2({
  defaultOpen: import_prop_types7.default.bool
}, Tooltip.propTypes);
var _excluded$2 = ["className", "cssModule", "type", "size", "color", "children", "tag"];
var propTypes$2 = {
  tag: tagPropType,
  type: import_prop_types7.default.oneOf(["border", "grow"]),
  size: import_prop_types7.default.oneOf(["sm"]),
  color: import_prop_types7.default.oneOf(["primary", "secondary", "success", "danger", "warning", "info", "light", "dark"]),
  className: import_prop_types7.default.string,
  cssModule: import_prop_types7.default.object,
  children: import_prop_types7.default.string
};
var defaultProps$2 = {
  tag: "div",
  type: "border",
  children: "Loading..."
};
function Spinner(props) {
  const {
    className,
    cssModule,
    type,
    size,
    color,
    children: children2,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded$2);
  const classes = mapToCssModules((0, import_classnames.default)(className, size ? `spinner-${type}-${size}` : false, `spinner-${type}`, color ? `text-${color}` : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({
    role: "status"
  }, attributes, {
    className: classes
  }), children2 && import_react8.default.createElement("span", {
    className: mapToCssModules("visually-hidden", cssModule)
  }, children2));
}
Spinner.propTypes = propTypes$2;
Spinner.defaultProps = defaultProps$2;
var _excluded$1 = ["className", "cssModule", "color", "innerRef", "tag", "animation", "size", "widths"];
var propTypes$1 = _objectSpread2(_objectSpread2({}, Col.propTypes), {}, {
  color: import_prop_types7.default.string,
  tag: tagPropType,
  animation: import_prop_types7.default.oneOf(["glow", "wave"]),
  innerRef: import_prop_types7.default.oneOfType([import_prop_types7.default.object, import_prop_types7.default.func, import_prop_types7.default.string]),
  size: import_prop_types7.default.oneOf(["lg", "sm", "xs"])
});
var defaultProps$1 = {
  tag: "span"
};
function Placeholder(props) {
  let {
    className,
    cssModule,
    color,
    innerRef,
    tag: Tag,
    animation,
    size,
    widths
  } = props, attributes = _objectWithoutProperties(props, _excluded$1);
  let {
    attributes: modifiedAttributes,
    colClasses
  } = getColumnClasses(attributes, cssModule, widths);
  const classes = mapToCssModules((0, import_classnames.default)(className, colClasses, "placeholder" + (animation ? "-" + animation : ""), size ? "placeholder-" + size : false, color ? "bg-" + color : false), cssModule);
  return import_react8.default.createElement(Tag, _extends2({}, modifiedAttributes, {
    className: classes,
    ref: innerRef
  }));
}
Placeholder.propTypes = propTypes$1;
Placeholder.defaultProps = defaultProps$1;
var _excluded = ["cssModule", "className", "tag"];
var propTypes = {
  size: import_prop_types7.default.string,
  color: import_prop_types7.default.string,
  outline: import_prop_types7.default.bool,
  className: import_prop_types7.default.string,
  tag: tagPropType,
  cssModule: import_prop_types7.default.object
};
var defaultProps2 = {
  color: "primary",
  tag: Button
};
function PlaceholderButton(props) {
  let {
    cssModule,
    className,
    tag: Tag
  } = props, attributes = _objectWithoutProperties(props, _excluded);
  let {
    attributes: modifiedAttributes,
    colClasses
  } = getColumnClasses(attributes, cssModule);
  const classes = mapToCssModules((0, import_classnames.default)("placeholder", className, colClasses), cssModule);
  return import_react8.default.createElement(Button, _extends2({}, modifiedAttributes, {
    className: classes,
    disabled: true
  }));
}
PlaceholderButton.propTypes = propTypes;
PlaceholderButton.defaultProps = defaultProps2;
(() => {
  if (typeof window !== "object" || typeof window.CustomEvent === "function")
    return;
  const CustomEvent2 = (event, params) => {
    params = params || {
      bubbles: false,
      cancelable: false,
      detail: null
    };
    let evt = document.createEvent("CustomEvent");
    evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return evt;
  };
  window.CustomEvent = CustomEvent2;
})();
(() => {
  if (typeof Object.values === "function")
    return;
  const values2 = (O) => Object.keys(O).map((key) => O[key]);
  Object.values = values2;
})();
var polyfill = {
  __proto__: null
};
export {
  Accordion,
  AccordionBody,
  AccordionContext,
  AccordionHeader,
  AccordionItem,
  Alert,
  Badge,
  Breadcrumb,
  BreadcrumbItem,
  Button,
  ButtonDropdown,
  ButtonGroup,
  ButtonToggle,
  ButtonToolbar,
  Card,
  CardBody,
  CardColumns,
  CardDeck,
  CardFooter,
  CardGroup,
  CardHeader,
  CardImg,
  CardImgOverlay,
  CardLink,
  CardSubtitle,
  CardText,
  CardTitle,
  Carousel$1 as Carousel,
  CarouselCaption,
  CarouselControl,
  CarouselIndicators,
  CarouselItem$1 as CarouselItem,
  CloseButton,
  Col,
  Collapse$1 as Collapse,
  Container,
  Dropdown$1 as Dropdown,
  DropdownContext,
  DropdownItem$1 as DropdownItem,
  DropdownMenu$1 as DropdownMenu,
  DropdownToggle$1 as DropdownToggle,
  Fade,
  Form$1 as Form,
  FormFeedback,
  FormGroup,
  FormText,
  Input$1 as Input,
  InputGroup,
  InputGroupText,
  Label,
  List$1 as List,
  ListGroup,
  ListGroupItem,
  ListGroupItemHeading,
  ListGroupItemText,
  ListInlineItem$1 as ListInlineItem,
  Media,
  Modal$1 as Modal,
  ModalBody,
  ModalFooter,
  ModalHeader,
  Nav,
  NavItem,
  NavLink$1 as NavLink,
  Navbar,
  NavbarBrand,
  NavbarText,
  NavbarToggler,
  Offcanvas$1 as Offcanvas,
  OffcanvasBody,
  OffcanvasHeader,
  Pagination,
  PaginationItem,
  PaginationLink,
  Placeholder,
  PlaceholderButton,
  polyfill as Polyfill,
  Popover,
  PopoverBody,
  PopoverHeader,
  PopperContent$1 as PopperContent,
  PopperTargetHelper,
  Progress,
  Row,
  Spinner,
  TabContent$1 as TabContent,
  TabPane,
  Table,
  Toast,
  ToastBody,
  ToastHeader,
  Tooltip,
  UncontrolledAccordion,
  UncontrolledAlert$1 as UncontrolledAlert,
  UncontrolledButtonDropdown,
  UncontrolledCarousel$1 as UncontrolledCarousel,
  UncontrolledCollapse$1 as UncontrolledCollapse,
  UncontrolledDropdown,
  UncontrolledPopover,
  UncontrolledTooltip,
  utils as Util
};
//# sourceMappingURL=reactstrap.js.map
